using System;
using System.Diagnostics;
using System.IO;
using System.Linq;

namespace Fairweather.Service
{
    // autogenerated: C:\Users\Fairweather\Desktop\struct_creator2.pl
    /*
    Program_File_Info
    string name
    string relative_path
    Environment.SpecialFolder top_folder
    bool required
    */
    [Serializable]
    //[DebuggerStepThrough]
    public struct Program_File_Info
    {

        // it's best to create such overloads when and if you need them


        public Program_File_Info(string name, string top_folder, bool required)
            : this(name, false, null, top_folder, required) {
        }



        public Program_File_Info(string name, bool is_folder, string top_folder, bool required)
            : this(name, is_folder, null, top_folder, required) {
        }
        public Program_File_Info(string name, Func<object, string> secondary_path, string top_folder, bool required)
            : this(name, false, secondary_path, top_folder, required) {
        }
        // ****************************


        public Program_File_Info(string name,
            bool is_folder,
            Func<object, string> secondary_path,
            string top_folder,
            bool required)
            : this() {

            this.Name = name;
            this.Is_Folder = is_folder;
            this.Secondary_Path = secondary_path;
            this.Top_Folder = top_folder.IsNullOrEmpty() ? H.Get_Exe_Dir() : top_folder;
            this.Is_Required = required;
        }

        public Program_File_Info(string name,
                    bool is_folder,
                    Func<object, string> secondary_path,
                    Environment.SpecialFolder? special_folder,
                    bool required)
            : this() {

            this.Name = name;
            this.Is_Folder = is_folder;
            this.Secondary_Path = secondary_path;
            this.Special_Folder = special_folder;
            this.Is_Required = required;

            if (Special_Folder == null) {
                this.Top_Folder = H.Get_Exe_Dir();
            }
            else {
                this.Top_Folder = Environment.GetFolderPath(Special_Folder.Value);
            }

        }

        // ****************************

        public bool Exists(object obj) {
            if (Is_File)
                return File.Exists(Get_Path(obj));
            else
                return Directory.Exists(Get_Path(obj));
        }


        public string Get_Path(object obj) {

            var ret = Get_Folder(obj);

            ret = ret.Cpath(Name);


            return ret;

        }

        public string Get_Folder(object obj) {
            var ret = Top_Folder;

            if (Secondary_Path != null) {

                var snd = Secondary_Path(obj);
                if (!snd.IsNullOrEmpty())
                    ret = ret.Cpath(snd);
            }

            return ret;
        }

        public void Create_Folder(object obj) {
            Directory.CreateDirectory(Is_File ? Get_Folder(obj) : Get_Path(obj));

        }

        public string Path {
            get {
                return Get_Path(null);
            }
        }

        /*public string Extension {
            get;
        }*/

        public string Name {
            get;
            private set;
        }

        public Func<object, string> Secondary_Path {
            get;
            private set;
        }

        public string Top_Folder {
            get;
            private set;
        }

        public Environment.SpecialFolder? Special_Folder {
            get;
            private set;
        }

        public bool Is_Required {
            get;
            private set;
        }

        public bool Is_File { get { return !Is_Folder; } }

        public bool Is_Folder { get; private set; }

        /* Boilerplate */

        public override string ToString() {

            string ret = "";
            const string _null = "[null]";

#pragma warning disable 472


            ret += "Name = " + this.Name == null ? _null : this.Name.ToString();
            ret += ", ";
            ret += "Relative_Path = " + this.Secondary_Path == null ? _null : this.Secondary_Path.ToString();
            ret += ", ";
            ret += "Top_Folder = " + this.Special_Folder == null ? _null : this.Special_Folder.ToString();
            ret += ", ";
            ret += "Required = " + this.Is_Required == null ? _null : this.Is_Required.ToString();


#pragma warning restore

            ret = "{Program_File_Info: " + ret + "}";
            return ret;

        }


        public bool Equals(Program_File_Info obj2) {

#pragma warning disable 472


            if (this.Name == null) {
                if (obj2.Name != null)
                    return false;
            }
            else if (!this.Name.Equals(obj2.Name)) {
                return false;
            }

            if (this.Secondary_Path == null) {
                if (obj2.Secondary_Path != null)
                    return false;
            }
            else if (!this.Secondary_Path.Equals(obj2.Secondary_Path)) {
                return false;
            }

            if (this.Special_Folder == null) {
                if (obj2.Special_Folder != null)
                    return false;
            }
            else if (!this.Special_Folder.Equals(obj2.Special_Folder)) {
                return false;
            }

            if (this.Is_Required == null) {
                if (obj2.Is_Required != null)
                    return false;
            }
            else if (!this.Is_Required.Equals(obj2.Is_Required)) {
                return false;
            }

#pragma warning restore
            return true;
        }


        public override bool Equals(object obj2) {

            if (obj2 == null)
                return false;

            if (!(obj2 is Program_File_Info))
                return false;

            var ret = this.Equals((Program_File_Info)obj2);

            return ret;

        }


        public static bool operator ==(Program_File_Info left, Program_File_Info right) {

            var ret = left.Equals(right);
            return ret;

        }


        public static bool operator !=(Program_File_Info left, Program_File_Info right) {

            var ret = !left.Equals(right);
            return ret;

        }


        public override int GetHashCode() {

#pragma warning disable 472
            unchecked {
                int ret = 23;
                int temp;


                if (this.Name != null) {
                    ret *= 31;
                    temp = this.Name.GetHashCode();
                    ret += temp;

                }

                if (this.Secondary_Path != null) {
                    ret *= 31;
                    temp = this.Secondary_Path.GetHashCode();
                    ret += temp;

                }

                if (this.Special_Folder != null) {
                    ret *= 31;
                    temp = this.Special_Folder.GetHashCode();
                    ret += temp;

                }

                if (this.Is_Required != null) {
                    ret *= 31;
                    temp = this.Is_Required.GetHashCode();
                    ret += temp;

                }

                return ret;

            } // unchecked block
#pragma warning restore
        } // method


    }
}
