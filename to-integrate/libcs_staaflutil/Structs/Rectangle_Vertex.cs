using System;
using System.Diagnostics;

namespace Fairweather.Service
{
    // autogenerated: D:\Scripts\struct_creator2.pl
    [Serializable]
    [DebuggerStepThrough]
    public struct Rectangle_Vertex
    {

        public Rectangle_Vertex(int ix)
            : this() {

            ix %= 4;
            this.Horizontal = (ix == 0 || ix == 3) ? Direction_LR.Left : Direction_LR.Right;
            this.Vertical = (ix == 0 || ix == 1) ? Direction_UD.Up : Direction_UD.Down;

        }
        public Rectangle_Vertex(Direction_LR lr,
                                Direction_UD ud)
            : this() {

            this.Horizontal = lr;
            this.Vertical = ud;
        }



        public Direction_LR Horizontal {
            get;
            set;
        }

        public Direction_UD Vertical {
            get;
            set;
        }

        static public Rectangle_Vertex LU {
            get {
                return new Rectangle_Vertex(0);
            }
        }
        static public Rectangle_Vertex LD {
            get {
                return new Rectangle_Vertex(3);
            }
        }
        static public Rectangle_Vertex RU {
            get {
                return new Rectangle_Vertex(1);
            }
        }
        static public Rectangle_Vertex RD {
            get {
                return new Rectangle_Vertex(2);
            }
        }

        public Rectangle_Vertex Flip_Horizontal {
            get {
                return new Rectangle_Vertex((Direction_LR)(((int)this.Vertical + 1) % 2),
                                            this.Vertical);
            }
        }

        public Rectangle_Vertex Flip_Vertical {
            get {
                return new Rectangle_Vertex(this.Horizontal,
                                            (Direction_UD)(((int)this.Vertical + 1) % 2));
            }
        }

        public Rectangle_Vertex Opposite {
            get {
                return Flip_Vertical.Flip_Horizontal;
            }
        }

        public Rectangle_Vertex Left {
            get {
                return new Rectangle_Vertex(
        Direction_LR.Left, this.Vertical);
            }
        }
        public Rectangle_Vertex Right {
            get {
                return new Rectangle_Vertex(Direction_LR.Right, this.Vertical);
            }
        }
        public Rectangle_Vertex Up {
            get {
                return new Rectangle_Vertex(
        this.Horizontal, Direction_UD.Up);
            }
        }
        public Rectangle_Vertex Down {
            get {
                return new Rectangle_Vertex(
        this.Horizontal, Direction_UD.Down);
            }
        }






        /* Boilerplate */

        public override string ToString() {

            string ret = "";
            const string _null = "[null]";

#pragma warning disable 472


            ret += "Lr = " + this.Horizontal == null ? _null : this.Horizontal.ToString();
            ret += ", ";
            ret += "Ud = " + this.Vertical == null ? _null : this.Vertical.ToString();


#pragma warning restore

            ret = "{Rectangle_Vertex: " + ret + "}";
            return ret;

        }


        public bool Equals(Rectangle_Vertex obj2) {

#pragma warning disable 472


            if (this.Horizontal == null) {
                if (obj2.Horizontal != null)
                    return false;
            }
            else if (!this.Horizontal.Equals(obj2.Horizontal)) {
                return false;
            }

            if (this.Vertical == null) {
                if (obj2.Vertical != null)
                    return false;
            }
            else if (!this.Vertical.Equals(obj2.Vertical)) {
                return false;
            }

#pragma warning restore
            return true;
        }


        public override bool Equals(object obj2) {

            if (obj2 == null)
                return false;

            if (!(obj2 is Rectangle_Vertex))
                return false;

            var ret = this.Equals((Rectangle_Vertex)obj2);

            return ret;

        }


        public static bool operator ==(Rectangle_Vertex left, Rectangle_Vertex right) {

            var ret = left.Equals(right);
            return ret;

        }


        public static bool operator !=(Rectangle_Vertex left, Rectangle_Vertex right) {

            var ret = !left.Equals(right);
            return ret;

        }


        public override int GetHashCode() {

#pragma warning disable 472
            unchecked {
                int ret = 23;
                int temp;


                if (this.Horizontal != null) {
                    ret *= 31;
                    temp = this.Horizontal.GetHashCode();
                    ret += temp;

                }

                if (this.Vertical != null) {
                    ret *= 31;
                    temp = this.Vertical.GetHashCode();
                    ret += temp;

                }

                return ret;

            } // unchecked block
#pragma warning restore
        } // method


    }
}
