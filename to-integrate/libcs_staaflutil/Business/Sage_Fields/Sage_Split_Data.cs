using System.Collections.Generic;
using Fairweather.Service;

namespace Common.Sage
{
    public static partial class Sage_Fields
    {
        static public class SplitData
        {
            // autogenerated: C:\Users\Fairweather\Desktop\Generation\sage_strings.pl
            static public readonly Sage_Field
            AMOUNT_PAID = Double("AMOUNT_PAID", "Total Amount Paid", 8) // Opt
            , BANK_FLAG = SByte("BANK_FLAG", "Bank Reconciled Flag", 1) // Opt
            , DATE = Date("DATE", "Date", 2) // Req
            , DELETED_FLAG = Short("DELETED_FLAG", "Transaction Deleted Flag", 2) // Opt
            , DEPT_NUMBER = Short("DEPT_NUMBER", "Department Number", 2) // Opt
            , DETAILS = String("DETAILS", "Details", 60) // Opt
            , DOCTOR_LINK = Int("DOCTOR_LINK", "Pointer to Fix by Doctor", 4) // Opt
            , FIRST_USAGE = Int("FIRST_USAGE", "Record Number of First Usage", 4) // Sys
            , FOREIGN_AMOUNT_PAID = Double("FOREIGN_AMOUNT_PAID", "Foreign Total Paid Amount", 8) // Opt
            , FOREIGN_NET_AMOUNT = Double("FOREIGN_NET_AMOUNT", "Foreign Net Amount", 8) // Opt
            , FOREIGN_TAX_AMOUNT = Double("FOREIGN_TAX_AMOUNT", "Foreign Tax Amount", 8) // Opt
            , HEADER_NUMBER = Int("HEADER_NUMBER", "Record Number of Header", 4) // Sys
            , INTERNAL_REF = String("INTERNAL_REF", "External Reference", 60) // Opt
            , LAST_USAGE = Int("LAST_USAGE", "Record Number of Last Usage", 4) // Sys
            , NET_AMOUNT = Double("NET_AMOUNT", "Net Amount", 8) // Opt
            , NEXT_NOMINAL = Int("NEXT_NOMINAL", "Record Number of Next Split for this Nominal", 4) // Sys
            , NEXT_SPLIT = Int("NEXT_SPLIT", "Record Number of Next Split", 4) // Sys
            , NO_OF_USAGE = Int("NO_OF_USAGE", "Number of Usages", 4) // Sys
            , NOMINAL_CODE = String("NOMINAL_CODE", "Nominal Code", 8) // Req
            , PAID_FLAG = SByte("PAID_FLAG", "Paid Flag", 1) // Opt
            , POSTED_DATE = Date("POSTED_DATE", "Posting Date", 2) // Req
            , PREV_NOMINAL = Int("PREV_NOMINAL", "Record Number of Previous Split for this Nominal", 4) // Sys
            , PREV_SPLIT = Int("PREV_SPLIT", "Record Number of Previous Split", 4) // Sys
            , STATUS = Short("STATUS", "Status Flag", 2) // Opt
            , TAX_AMOUNT = Double("TAX_AMOUNT", "Tax Amount", 8) // Opt
            , TAX_CODE = Short("TAX_CODE", "Tax Code", 2) // Req
            , TRAN_NUMBER = Int("TRAN_NUMBER", "Unique Transaction Number", 4) // Sys
            , TYPE = SByte("TYPE", "Transaction Type", 1) // Req
            , UNIQUE_REF = Int("UNIQUE_REF", "Unique Reference", 4) // Sys
            , USER_NAME = String("USER_NAME", "User Name", 32) // Opt
            , VAT_FLAG = SByte("VAT_FLAG", "Vat Reconciled Flag", 1) // Opt
            , VAT_RECONCILED_DATE = Date("VAT_RECONCILED_DATE", "Date of VAT Reconciliation", 2) // Opt
            ;

            public static  Dict_ro<string, Sage_Field>
            Fields { get { return fields; } }

            static readonly Dict_ro<string, Sage_Field>
            fields = Make(AMOUNT_PAID
            , BANK_FLAG
            , DATE
            , DELETED_FLAG
            , DEPT_NUMBER
            , DETAILS
            , DOCTOR_LINK
            , FIRST_USAGE
            , FOREIGN_AMOUNT_PAID
            , FOREIGN_NET_AMOUNT
            , FOREIGN_TAX_AMOUNT
            , HEADER_NUMBER
            , INTERNAL_REF
            , LAST_USAGE
            , NET_AMOUNT
            , NEXT_NOMINAL
            , NEXT_SPLIT
            , NO_OF_USAGE
            , NOMINAL_CODE
            , PAID_FLAG
            , POSTED_DATE
            , PREV_NOMINAL
            , PREV_SPLIT
            , STATUS
            , TAX_AMOUNT
            , TAX_CODE
            , TRAN_NUMBER
            , TYPE
            , UNIQUE_REF
            , USER_NAME
            , VAT_FLAG
            , VAT_RECONCILED_DATE
            );
        }
    }
}