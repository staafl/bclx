using System;
using System.Diagnostics;

namespace Common.Sage
{
    /// Describes a data field in a Sage Data Object.
    // autogenerated: D:\Scripts\struct_creator2.pl
    [Serializable]
    [DebuggerStepThrough]
    public struct Sage_Field
    {

        public Sage_Field(string name,
                    string description,
                    int length,
                    TypeCode type)
            : this() {

            this.Name = name;
            this.Description = description;
            this.Length = length;
            this.Type = type;
        }


        public string Name {
            get;
            set;
        }

        public string Description {
            get;
            set;
        }

        public int Length {
            get;
            set;
        }

        public TypeCode Type {
            get;
            set;
        }



        /* Boilerplate */

        public override string ToString() {

            string ret = "";
            const string _null = "[null]";

#pragma warning disable 472


            ret += "Name = " + this.Name == null ? _null : this.Name.ToString();
            ret += ", ";
            ret += "Description = " + this.Description == null ? _null : this.Description.ToString();
            ret += ", ";
            ret += "Length = " + this.Length == null ? _null : this.Length.ToString();
            ret += ", ";
            ret += "Type = " + this.Type == null ? _null : this.Type.ToString();


#pragma warning restore

            ret = "{Sage_Field: " + ret + "}";
            return ret;

        }


        public bool Equals(Sage_Field obj2) {

#pragma warning disable 472


            if (this.Name == null) {
                if (obj2.Name != null)
                    return false;
            }
            else if (!this.Name.Equals(obj2.Name)) {
                return false;
            }

            if (this.Description == null) {
                if (obj2.Description != null)
                    return false;
            }
            else if (!this.Description.Equals(obj2.Description)) {
                return false;
            }

            if (this.Length == null) {
                if (obj2.Length != null)
                    return false;
            }
            else if (!this.Length.Equals(obj2.Length)) {
                return false;
            }

            if (this.Type == null) {
                if (obj2.Type != null)
                    return false;
            }
            else if (!this.Type.Equals(obj2.Type)) {
                return false;
            }

#pragma warning restore
            return true;
        }


        public override bool Equals(object obj2) {

            if (obj2 == null)
                return false;

            if (!(obj2 is Sage_Field))
                return false;

            var ret = this.Equals((Sage_Field)obj2);

            return ret;

        }


        public static bool operator ==(Sage_Field left, Sage_Field right) {

            var ret = left.Equals(right);
            return ret;

        }


        public static bool operator !=(Sage_Field left, Sage_Field right) {

            var ret = !left.Equals(right);
            return ret;

        }


        public override int GetHashCode() {

#pragma warning disable 472
            unchecked {
                int ret = 23;
                int temp;


                if (this.Name != null) {
                    ret *= 31;
                    temp = this.Name.GetHashCode();
                    ret += temp;

                }

                if (this.Description != null) {
                    ret *= 31;
                    temp = this.Description.GetHashCode();
                    ret += temp;

                }

                if (this.Length != null) {
                    ret *= 31;
                    temp = this.Length.GetHashCode();
                    ret += temp;

                }

                if (this.Type != null) {
                    ret *= 31;
                    temp = this.Type.GetHashCode();
                    ret += temp;

                }

                return ret;

            } // unchecked block
#pragma warning restore
        } // method


    }

}
