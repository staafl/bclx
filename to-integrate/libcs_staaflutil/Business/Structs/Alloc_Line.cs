using System;
using System.Diagnostics;
using Versioning;
using TT = Versioning.TransType;

namespace Common
{
    // autogenerated: D:\Scripts\struct_creator2.pl
    // Represents a row on the Payments module grid(s): 
    // relevant transaction data + receipt & discount info.
    [Serializable]
    [DebuggerStepThrough]
    public struct Alloc_Line
    {

        public Alloc_Line(Transaction_Line line,
                    decimal receipt,
                    decimal discount)
            : this() {

            this.Line = line;
            this.Receipt = receipt;
            this.Discount = discount;
        }


        public Transaction_Line Line {
            get;
            private set;
        }

        public decimal Receipt {
            get;
            private set;
        }

        public decimal Discount {
            get;
            private set;
        }



        /* Boilerplate */

        public override string ToString() {

            string ret = "";
            const string _null = "[null]";

#pragma warning disable 472


            ret += "Line = " + this.Line == null ? _null : this.Line.ToString();
            ret += ", ";
            ret += "Receipt = " + this.Receipt == null ? _null : this.Receipt.ToString();
            ret += ", ";
            ret += "Discount = " + this.Discount == null ? _null : this.Discount.ToString();


#pragma warning restore

            ret = "{Alloc_Line: " + ret + "}";
            return ret;

        }


        public bool Equals(Alloc_Line obj2) {

#pragma warning disable 472


            if (this.Line == null) {
                if (obj2.Line != null)
                    return false;
            }
            else if (!this.Line.Equals(obj2.Line)) {
                return false;
            }

            if (this.Receipt == null) {
                if (obj2.Receipt != null)
                    return false;
            }
            else if (!this.Receipt.Equals(obj2.Receipt)) {
                return false;
            }

            if (this.Discount == null) {
                if (obj2.Discount != null)
                    return false;
            }
            else if (!this.Discount.Equals(obj2.Discount)) {
                return false;
            }

#pragma warning restore
            return true;
        }


        public override bool Equals(object obj2) {

            if (obj2 == null)
                return false;

            if (!(obj2 is Alloc_Line))
                return false;

            var ret = this.Equals((Alloc_Line)obj2);

            return ret;

        }


        public static bool operator ==(Alloc_Line left, Alloc_Line right) {

            var ret = left.Equals(right);
            return ret;

        }


        public static bool operator !=(Alloc_Line left, Alloc_Line right) {

            var ret = !left.Equals(right);
            return ret;

        }


        public override int GetHashCode() {

#pragma warning disable 472
            unchecked {
                int ret = 23;
                int temp;


                if (this.Line != null) {
                    ret *= 31;
                    temp = this.Line.GetHashCode();
                    ret += temp;

                }

                if (this.Receipt != null) {
                    ret *= 31;
                    temp = this.Receipt.GetHashCode();
                    ret += temp;

                }

                if (this.Discount != null) {
                    ret *= 31;
                    temp = this.Discount.GetHashCode();
                    ret += temp;

                }

                return ret;

            } // unchecked block
#pragma warning restore
        } // method


    }
}
