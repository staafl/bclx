using System;
using System.Diagnostics;
using Versioning;

namespace Common
{

    // autogenerated: C:\Scripts\struct_creator2.pl
    // Represents a Sage transaction as seen by the Payments module.
    [DebuggerStepThrough]
    public struct Transaction_Line
    {

        public Transaction_Line(TransType type,
                    DateTime date,
                    int unique_ref,
                    string reference,
                    string ex_ref,
                    decimal amount,
                    int? tax_code,
                    string details,
                    bool disputed)
            : this() {

            this.Type = type;
            this.Date = date;
            this.Unique_Ref = unique_ref;
            this.Reference = reference;
            this.Ex_Ref = ex_ref;
            this.Amount = amount;
            this.Tax_Code = tax_code;
            this.Details = details;
            this.Disputed = disputed;
        }


        public TransType Type {
            get;
            private set;
        }

        public DateTime Date {
            get;
            private set;
        }

        public int Unique_Ref {
            get;
            private set;
        }

        public string Reference {
            get;
            private set;
        }

        public string Ex_Ref {
            get;
            private set;
        }

        public decimal Amount {
            get;
            private set;
        }

        public int? Tax_Code {
            get;
            private set;
        }

        public string Details {
            get;
            private set;
        }

        public bool Disputed {
            get;
            private set;
        }



        /* Boilerplate */

        public override string ToString() {

            string ret = "";
            const string _null = "[null]";

#pragma warning disable 472


            ret += "Type = " + this.Type == null ? _null : this.Type.ToString();
            ret += ", ";
            ret += "Date = " + this.Date == null ? _null : this.Date.ToString();
            ret += ", ";
            ret += "Unique_Ref = " + this.Unique_Ref == null ? _null : this.Unique_Ref.ToString();
            ret += ", ";
            ret += "Reference = " + this.Reference == null ? _null : this.Reference.ToString();
            ret += ", ";
            ret += "Ex_Ref = " + this.Ex_Ref == null ? _null : this.Ex_Ref.ToString();
            ret += ", ";
            ret += "Amount = " + this.Amount == null ? _null : this.Amount.ToString();
            ret += ", ";
            ret += "Tax_Code = " + this.Tax_Code == null ? _null : this.Tax_Code.ToString();
            ret += ", ";
            ret += "Details = " + this.Details == null ? _null : this.Details.ToString();
            ret += ", ";
            ret += "Disputed = " + this.Disputed == null ? _null : this.Disputed.ToString();


#pragma warning restore

            ret = "{Transaction_Line: " + ret + "}";
            return ret;

        }


        public bool Equals(Transaction_Line obj2) {

#pragma warning disable 472


            if (this.Type == null) {
                if (obj2.Type != null)
                    return false;
            }
            else if (!this.Type.Equals(obj2.Type)) {
                return false;
            }

            if (this.Date == null) {
                if (obj2.Date != null)
                    return false;
            }
            else if (!this.Date.Equals(obj2.Date)) {
                return false;
            }

            if (this.Unique_Ref == null) {
                if (obj2.Unique_Ref != null)
                    return false;
            }
            else if (!this.Unique_Ref.Equals(obj2.Unique_Ref)) {
                return false;
            }

            if (this.Reference == null) {
                if (obj2.Reference != null)
                    return false;
            }
            else if (!this.Reference.Equals(obj2.Reference)) {
                return false;
            }

            if (this.Ex_Ref == null) {
                if (obj2.Ex_Ref != null)
                    return false;
            }
            else if (!this.Ex_Ref.Equals(obj2.Ex_Ref)) {
                return false;
            }

            if (this.Amount == null) {
                if (obj2.Amount != null)
                    return false;
            }
            else if (!this.Amount.Equals(obj2.Amount)) {
                return false;
            }

            if (this.Tax_Code == null) {
                if (obj2.Tax_Code != null)
                    return false;
            }
            else if (!this.Tax_Code.Equals(obj2.Tax_Code)) {
                return false;
            }

            if (this.Details == null) {
                if (obj2.Details != null)
                    return false;
            }
            else if (!this.Details.Equals(obj2.Details)) {
                return false;
            }

            if (this.Disputed == null) {
                if (obj2.Disputed != null)
                    return false;
            }
            else if (!this.Disputed.Equals(obj2.Disputed)) {
                return false;
            }

#pragma warning restore
            return true;
        }


        public override bool Equals(object obj2) {

            if (obj2 == null)
                return false;

            if (!(obj2 is Transaction_Line))
                return false;

            var ret = this.Equals((Transaction_Line)obj2);

            return ret;

        }


        public static bool operator ==(Transaction_Line left, Transaction_Line right) {

            var ret = left.Equals(right);
            return ret;

        }


        public static bool operator !=(Transaction_Line left, Transaction_Line right) {

            var ret = !left.Equals(right);
            return ret;

        }


        public override int GetHashCode() {

#pragma warning disable 472
            unchecked {
                int ret = 23;
                int temp;


                if (this.Type != null) {
                    ret *= 31;
                    temp = this.Type.GetHashCode();
                    ret += temp;

                }

                if (this.Date != null) {
                    ret *= 31;
                    temp = this.Date.GetHashCode();
                    ret += temp;

                }

                if (this.Unique_Ref != null) {
                    ret *= 31;
                    temp = this.Unique_Ref.GetHashCode();
                    ret += temp;

                }

                if (this.Reference != null) {
                    ret *= 31;
                    temp = this.Reference.GetHashCode();
                    ret += temp;

                }

                if (this.Ex_Ref != null) {
                    ret *= 31;
                    temp = this.Ex_Ref.GetHashCode();
                    ret += temp;

                }

                if (this.Amount != null) {
                    ret *= 31;
                    temp = this.Amount.GetHashCode();
                    ret += temp;

                }

                if (this.Tax_Code != null) {
                    ret *= 31;
                    temp = this.Tax_Code.GetHashCode();
                    ret += temp;

                }

                if (this.Details != null) {
                    ret *= 31;
                    temp = this.Details.GetHashCode();
                    ret += temp;

                }

                if (this.Disputed != null) {
                    ret *= 31;
                    temp = this.Disputed.GetHashCode();
                    ret += temp;

                }

                return ret;

            } // unchecked block
#pragma warning restore
        } // method


    }



}



