using System;
using System.Diagnostics;
using Fairweather.Service;


namespace Common
{
    // autogenerated: D:\Scripts\struct_creator2.pl
    [Serializable]
    [DebuggerStepThrough]
    public struct Credit_Allocation_Data
    {

        public Credit_Allocation_Data(int? source,
                    int target,
                    decimal amount,
                    Allocation_Type type)
            : this() {

            this.Source = source;
            this.Target = target;
            this.Amount = amount;
            this.Type = type;

            Validate();
        }

        public Credit_Allocation_Data
        Assign_Source(int source) {

            Source.HasValue.tift();

            var ret = new Credit_Allocation_Data(source, Target, Amount, Type);

            return ret;

        }

        /// <summary>
        /// Ensures the consistency of the data
        /// </summary>
        public void Validate() {

            bool must_have_source = (Type == Allocation_Type.SA_To_SI || Type == Allocation_Type.SC_To_SI);
            // bool must_not_have_source = !must_have_source;

            if (must_have_source)
                (Source.HasValue).tiff();

        }


        public int? Source {
            get;
            set;
        }

        public int Target {
            get;
            set;
        }

        public decimal Amount {
            get;
            set;
        }

        public Allocation_Type Type {
            get;
            set;
        }



        /* Boilerplate */

        public override string ToString() {

            string ret = "";
            const string _null = "[null]";

#pragma warning disable 472


            ret += "Source = " + this.Source == null ? _null : this.Source.ToString();
            ret += ", ";
            ret += "Target = " + this.Target == null ? _null : this.Target.ToString();
            ret += ", ";
            ret += "Amount = " + this.Amount == null ? _null : this.Amount.ToString();
            ret += ", ";
            ret += "Type = " + this.Type == null ? _null : this.Type.ToString();


#pragma warning restore

            ret = "{Credit_Allocation_Data: " + ret + "}";
            return ret;

        }


        public bool Equals(Credit_Allocation_Data obj2) {

#pragma warning disable 472


            if (this.Source == null) {
                if (obj2.Source != null)
                    return false;
            }
            else if (!this.Source.Equals(obj2.Source)) {
                return false;
            }

            if (this.Target == null) {
                if (obj2.Target != null)
                    return false;
            }
            else if (!this.Target.Equals(obj2.Target)) {
                return false;
            }

            if (this.Amount == null) {
                if (obj2.Amount != null)
                    return false;
            }
            else if (!this.Amount.Equals(obj2.Amount)) {
                return false;
            }

            if (this.Type == null) {
                if (obj2.Type != null)
                    return false;
            }
            else if (!this.Type.Equals(obj2.Type)) {
                return false;
            }

#pragma warning restore
            return true;
        }


        public override bool Equals(object obj2) {

            if (obj2 == null)
                return false;

            if (!(obj2 is Credit_Allocation_Data))
                return false;

            var ret = this.Equals((Credit_Allocation_Data)obj2);

            return ret;

        }


        public static bool operator ==(Credit_Allocation_Data left, Credit_Allocation_Data right) {

            var ret = left.Equals(right);
            return ret;

        }


        public static bool operator !=(Credit_Allocation_Data left, Credit_Allocation_Data right) {

            var ret = !left.Equals(right);
            return ret;

        }


        public override int GetHashCode() {

#pragma warning disable 472
            unchecked {
                int ret = 23;
                int temp;


                if (this.Source != null) {
                    ret *= 31;
                    temp = this.Source.GetHashCode();
                    ret += temp;

                }

                if (this.Target != null) {
                    ret *= 31;
                    temp = this.Target.GetHashCode();
                    ret += temp;

                }

                if (this.Amount != null) {
                    ret *= 31;
                    temp = this.Amount.GetHashCode();
                    ret += temp;

                }

                if (this.Type != null) {
                    ret *= 31;
                    temp = this.Type.GetHashCode();
                    ret += temp;

                }

                return ret;

            } // unchecked block
#pragma warning restore
        } // method


    }
}
