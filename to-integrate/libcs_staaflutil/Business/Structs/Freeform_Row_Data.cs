using System;
using System.Diagnostics;
using Versioning;
using TT = Versioning.TransType;
using Common.Posting;
using Fairweather.Service;
namespace Common
{


    /*       In fact, it is not even required to have the Tran_Type, Dept and Tax_Code as nullable,        */
    /*       if we make sure that default values are always entered when creating a new row...        */

    // autogenerated: D:\Scripts\struct_creator2.pl
    /* Represents a row on the Transactions Entry module's grid. */
    [Serializable]
    public class Freeform_Row_Data
    {
        public Freeform_Row_Data(int _) {
            throw new InvalidOperationException();
        }
        public Freeform_Row_Data() { }

        public Freeform_Row_Data(IFree_Form form,
                                 object[] arr)
            //    : this() 
        {

            // clipe | perl -e "$ii = -1; chomp, ++$ii, print qq($_ = (string)arr[$ii];\n),while(<>);" 
            // after enumerating each property on its own line
            // all that is left is to fix the casts

            this.TT = (TT?)arr[form.COL_TT];
            this.Acc_Ref = (string)arr[form.COL_ACCOUNT];
            this.Date = (DateTime?)arr[form.COL_DATE];
            this.Ref = (string)arr[form.COL_REF];
            this.Ex_Ref = (string)arr[form.COL_EX_REF];
            this.Nominal = (string)arr[form.COL_NOMINAL];
            this.Dept = (short?)arr[form.COL_DEPT].ToInt32();
            this.Proj_Ref = (string)arr[form.COL_PROJ_REF];
            this.Cost_Code = (string)arr[form.COL_COST_CODE];
            this.Details = (string)arr[form.COL_DETAILS];
            this.Net = (decimal?)arr[form.COL_NET];
            this.Tax_Code = (short?)arr[form.COL_TAX_CODE].ToInt32();
            this.Vat = (decimal?)arr[form.COL_TAX];

            switch (arr[form.COL_ALLOC].strdef().Trim().ToUpper()) {
                case "AUTO":
                    this.Alloc = FF_Alloc_Type.Auto;
                    break;
                case "MANUAL":
                    this.Alloc = FF_Alloc_Type.Manual;
                    break;
                default:
                    this.Alloc = 0;
                    break;

            }


        }

        public Freeform_Row_Data(TT? tran_type,
                    string acc_ref,
                    DateTime? date,
                    string reference,
                    string ex_ref,
                    string nominal,
                    int? dept,
                    string proj_ref,
                    string cost_code,
                    string details,
                    decimal? net,
                    short? tax_code,
                    decimal? vat)
            //    : this()
        {

            this.TT = tran_type;
            this.Acc_Ref = acc_ref;
            this.Date = date;
            this.Ref = reference;
            this.Ex_Ref = ex_ref;
            this.Nominal = nominal;
            this.Dept = dept;
            this.Proj_Ref = proj_ref;
            this.Cost_Code = cost_code;
            this.Details = details;
            this.Net = net;
            this.Tax_Code = tax_code;
            this.Vat = vat;
        }


        // ****************************

        public object[] As_Array(IFree_Form iform) {
            var ret = new object[14];

            ret[iform.COL_TT] = this.TT;
            ret[iform.COL_ACCOUNT] = this.Acc_Ref;
            ret[iform.COL_DATE] = this.Date;
            ret[iform.COL_REF] = this.Ref;
            ret[iform.COL_EX_REF] = this.Ex_Ref;
            ret[iform.COL_NOMINAL] = this.Nominal;
            ret[iform.COL_DEPT] = this.Dept;
            ret[iform.COL_PROJ_REF] = this.Proj_Ref;
            ret[iform.COL_COST_CODE] = this.Cost_Code;
            ret[iform.COL_DETAILS] = this.Details;
            ret[iform.COL_NET] = this.Net;
            ret[iform.COL_TAX_CODE] = this.Tax_Code;
            ret[iform.COL_TAX] = this.Vat;
            ret[iform.COL_ALLOC] = this.Alloc;

            return ret;
        }

        public Trans_Line As_Trans_Line() {
            return new Trans_Line(As_Data_Line());
        }

        public Data_Line As_Data_Line() {
            var ret = new Data_Line
            {
                TYPE = TT.Value,
                ACCOUNT_REF = Acc_Ref,
                DATE = Date.Value,
                INV_REF = Ref,
                INTERNAL_REF = Ex_Ref,
                NOMINAL_CODE = Nominal,
                DEPT_NUMBER = Dept.Value,
                DETAILS = Details,
                NET_AMOUNT = Net.Value,
                TAX_CODE = Tax_Code.Value,
                TAX_AMOUNT = Vat.Value,
            };
            ret["PROJ_REF"] = this.Proj_Ref;
            ret["COST_CODE"] = this.Cost_Code;
            return ret;
        }


        public TT? TT {
            get;
            set /* serialization only */;
        }

        public string Acc_Ref {
            get;
            set /* serialization only */;
        }

        public DateTime? Date {
            get;
            set /* serialization only */;
        }

        public string Nominal {
            get;
            set /* serialization only */;
        }

        public string Ref {
            get;
            set /* serialization only */;
        }

        public string Ex_Ref {
            get;
            set /* serialization only */;
        }

        public int? Dept {
            get;
            set /* serialization only */;
        }

        public string Proj_Ref {
            get;
            set /* serialization only */;
        }

        public string Cost_Code {
            get;
            set /* serialization only */;
        }

        public string Details {
            get;
            set /* serialization only */;
        }

        public decimal? Net {
            get;
            set /* serialization only */;
        }

        public short? Tax_Code {
            get;
            set /* serialization only */;
        }

        public decimal? Vat {
            get;
            set /* serialization only */;
        }

        public FF_Alloc_Type Alloc {
            get;
            set /* serialization only */;
        }


        /*       State        */


        public int? Row { get; set; }



        /* Boilerplate */

        public override string ToString() {

            string ret = "";
            const string _null = "[null]";

#pragma warning disable 472


            ret += "Tran_Type = " + this.TT == null ? _null : this.TT.ToString();
            ret += ", ";
            ret += "Acc_Ref = " + this.Acc_Ref == null ? _null : this.Acc_Ref.ToString();
            ret += ", ";
            ret += "Date = " + this.Date == null ? _null : this.Date.ToString();
            ret += ", ";
            ret += "Nominal = " + this.Nominal == null ? _null : this.Nominal.ToString();
            ret += ", ";
            ret += "Ref = " + this.Ref == null ? _null : this.Ref.ToString();
            ret += ", ";
            ret += "Ex_Ref = " + this.Ex_Ref == null ? _null : this.Ex_Ref.ToString();
            ret += ", ";
            ret += "Dept = " + this.Dept == null ? _null : this.Dept.ToString();
            ret += ", ";
            ret += "Proj_Ref = " + this.Proj_Ref == null ? _null : this.Proj_Ref.ToString();
            ret += ", ";
            ret += "Cost_Code = " + this.Cost_Code == null ? _null : this.Cost_Code.ToString();
            ret += ", ";
            ret += "Details = " + this.Details == null ? _null : this.Details.ToString();
            ret += ", ";
            ret += "Net = " + this.Net == null ? _null : this.Net.ToString();
            ret += ", ";
            ret += "Tax_Code = " + this.Tax_Code == null ? _null : this.Tax_Code.ToString();
            ret += ", ";
            ret += "Vat = " + this.Vat == null ? _null : this.Vat.ToString();


#pragma warning restore

            ret = "{Freeform_Row_Data: " + ret + "}";
            return ret;

        }


        public bool Equals(Freeform_Row_Data obj2) {

#pragma warning disable 472


            if (this.TT == null) {
                if (obj2.TT != null)
                    return false;
            }
            else if (!this.TT.Equals(obj2.TT)) {
                return false;
            }

            if (this.Acc_Ref == null) {
                if (obj2.Acc_Ref != null)
                    return false;
            }
            else if (!this.Acc_Ref.Equals(obj2.Acc_Ref)) {
                return false;
            }

            if (this.Date == null) {
                if (obj2.Date != null)
                    return false;
            }
            else if (!this.Date.Equals(obj2.Date)) {
                return false;
            }

            if (this.Nominal == null) {
                if (obj2.Nominal != null)
                    return false;
            }
            else if (!this.Nominal.Equals(obj2.Nominal)) {
                return false;
            }

            if (this.Ref == null) {
                if (obj2.Ref != null)
                    return false;
            }
            else if (!this.Ref.Equals(obj2.Ref)) {
                return false;
            }

            if (this.Ex_Ref == null) {
                if (obj2.Ex_Ref != null)
                    return false;
            }
            else if (!this.Ex_Ref.Equals(obj2.Ex_Ref)) {
                return false;
            }

            if (this.Dept == null) {
                if (obj2.Dept != null)
                    return false;
            }
            else if (!this.Dept.Equals(obj2.Dept)) {
                return false;
            }

            if (this.Proj_Ref == null) {
                if (obj2.Proj_Ref != null)
                    return false;
            }
            else if (!this.Proj_Ref.Equals(obj2.Proj_Ref)) {
                return false;
            }

            if (this.Cost_Code == null) {
                if (obj2.Cost_Code != null)
                    return false;
            }
            else if (!this.Cost_Code.Equals(obj2.Cost_Code)) {
                return false;
            }

            if (this.Details == null) {
                if (obj2.Details != null)
                    return false;
            }
            else if (!this.Details.Equals(obj2.Details)) {
                return false;
            }

            if (this.Net == null) {
                if (obj2.Net != null)
                    return false;
            }
            else if (!this.Net.Equals(obj2.Net)) {
                return false;
            }

            if (this.Tax_Code == null) {
                if (obj2.Tax_Code != null)
                    return false;
            }
            else if (!this.Tax_Code.Equals(obj2.Tax_Code)) {
                return false;
            }

            if (this.Vat == null) {
                if (obj2.Vat != null)
                    return false;
            }
            else if (!this.Vat.Equals(obj2.Vat)) {
                return false;
            }

#pragma warning restore
            return true;
        }


        public override bool Equals(object obj2) {

            if (obj2 == null)
                return false;

            if (!(obj2 is Freeform_Row_Data))
                return false;

            var ret = this.Equals((Freeform_Row_Data)obj2);

            return ret;

        }


        public static bool operator ==(Freeform_Row_Data left, Freeform_Row_Data right) {

            var ret = left.Safe_Equals(right);
            return ret;

        }


        public static bool operator !=(Freeform_Row_Data left, Freeform_Row_Data right) {

            var ret = !left.Safe_Equals(right);
            return ret;

        }


        public override int GetHashCode() {

#pragma warning disable 472
            unchecked {
                int ret = 23;
                int temp;


                if (this.TT != null) {
                    ret *= 31;
                    temp = this.TT.GetHashCode();
                    ret += temp;

                }

                if (this.Acc_Ref != null) {
                    ret *= 31;
                    temp = this.Acc_Ref.GetHashCode();
                    ret += temp;

                }

                if (this.Date != null) {
                    ret *= 31;
                    temp = this.Date.GetHashCode();
                    ret += temp;

                }

                if (this.Nominal != null) {
                    ret *= 31;
                    temp = this.Nominal.GetHashCode();
                    ret += temp;

                }

                if (this.Ref != null) {
                    ret *= 31;
                    temp = this.Ref.GetHashCode();
                    ret += temp;

                }

                if (this.Ex_Ref != null) {
                    ret *= 31;
                    temp = this.Ex_Ref.GetHashCode();
                    ret += temp;

                }

                if (this.Dept != null) {
                    ret *= 31;
                    temp = this.Dept.GetHashCode();
                    ret += temp;

                }

                if (this.Proj_Ref != null) {
                    ret *= 31;
                    temp = this.Proj_Ref.GetHashCode();
                    ret += temp;

                }

                if (this.Cost_Code != null) {
                    ret *= 31;
                    temp = this.Cost_Code.GetHashCode();
                    ret += temp;

                }

                if (this.Details != null) {
                    ret *= 31;
                    temp = this.Details.GetHashCode();
                    ret += temp;

                }

                if (this.Net != null) {
                    ret *= 31;
                    temp = this.Net.GetHashCode();
                    ret += temp;

                }

                if (this.Tax_Code != null) {
                    ret *= 31;
                    temp = this.Tax_Code.GetHashCode();
                    ret += temp;

                }

                if (this.Vat != null) {
                    ret *= 31;
                    temp = this.Vat.GetHashCode();
                    ret += temp;

                }

                return ret;

            } // unchecked block
#pragma warning restore
        } // method


    }
}
