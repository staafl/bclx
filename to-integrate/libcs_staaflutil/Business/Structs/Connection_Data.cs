using System.Diagnostics;


namespace Common
{
    // autogenerated: D:\Scripts\struct_creator2.pl
    [DebuggerStepThrough]
    public struct Connection_Data
    {

        public Connection_Data(string username,
                    string path,
                    int version)
            : this() {

            this.Username = username;
            this.Path = path;
            this.Version = version;
        }


        public string Username {
            get;
            set;
        }

        public string Path {
            get;
            set;
        }

        public int Version {
            get;
            set;
        }



        /* Boilerplate */

        public override string ToString() {

            string ret = "";
            const string _null = "[null]";

#pragma warning disable 472


            ret += "Username = " + this.Username == null ? _null : this.Username.ToString();
            ret += ", ";
            ret += "Path = " + this.Path == null ? _null : this.Path.ToString();
            ret += ", ";
            ret += "Version = " + this.Version == null ? _null : this.Version.ToString();


#pragma warning restore

            ret = "{Connection_Data: " + ret + "}";
            return ret;

        }


        public bool Equals(Connection_Data obj2) {

#pragma warning disable 472


            if (this.Username == null) {
                if (obj2.Username != null)
                    return false;
            }
            else if (!this.Username.Equals(obj2.Username)) {
                return false;
            }

            if (this.Path == null) {
                if (obj2.Path != null)
                    return false;
            }
            else if (!this.Path.Equals(obj2.Path)) {
                return false;
            }

            if (this.Version == null) {
                if (obj2.Version != null)
                    return false;
            }
            else if (!this.Version.Equals(obj2.Version)) {
                return false;
            }

#pragma warning restore
            return true;
        }


        public override bool Equals(object obj2) {

            if (obj2 == null)
                return false;

            if (!(obj2 is Connection_Data))
                return false;

            var ret = this.Equals((Connection_Data)obj2);

            return ret;

        }


        public static bool operator ==(Connection_Data left, Connection_Data right) {

            var ret = left.Equals(right);
            return ret;

        }


        public static bool operator !=(Connection_Data left, Connection_Data right) {

            var ret = !left.Equals(right);
            return ret;

        }


        public override int GetHashCode() {

#pragma warning disable 472
            unchecked {
                int ret = 23;
                int temp;


                if (this.Username != null) {
                    ret *= 31;
                    temp = this.Username.GetHashCode();
                    ret += temp;

                }

                if (this.Path != null) {
                    ret *= 31;
                    temp = this.Path.GetHashCode();
                    ret += temp;

                }

                if (this.Version != null) {
                    ret *= 31;
                    temp = this.Version.GetHashCode();
                    ret += temp;

                }

                return ret;

            } // unchecked block
#pragma warning restore
        } // method


    }


}
