using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Text.RegularExpressions;
using System.Linq;
using Common;
using Common.Controls;
using Common.Dialogs;
using DTA;
using Standardization;
using Fairweather.Service;
using TT = Versioning.TransType;
using System.Diagnostics;
namespace Screens
{
    // autogenerated: D:\Scripts\struct_creator2.pl
    [Serializable]
    [DebuggerStepThrough]
    public struct TE_Truncated_Entry
    {

        public TE_Truncated_Entry(int column,
                    int row,
                    int maximum_length,
                    string original,
                    string truncated)
            : this() {

            this.Column = column;
            this.Row = row;
            this.Maximum_Length = maximum_length;
            this.Original = original;
            this.Truncated = truncated;
        }


        public int Column {
            get;
            set;
        }

        public int Row {
            get;
            set;
        }

        public int Maximum_Length {
            get;
            set;
        }

        public string Original {
            get;
            set;
        }

        public string Truncated {
            get;
            set;
        }



        /* Boilerplate */

        public override string ToString() {

            string ret = "";
            const string _null = "[null]";

#pragma warning disable 472


            ret += "Column = " + this.Column == null ? _null : this.Column.ToString();
            ret += ", ";
            ret += "Row = " + this.Row == null ? _null : this.Row.ToString();
            ret += ", ";
            ret += "Maximum_Length = " + this.Maximum_Length == null ? _null : this.Maximum_Length.ToString();
            ret += ", ";
            ret += "Original = " + this.Original == null ? _null : this.Original.ToString();
            ret += ", ";
            ret += "Truncated = " + this.Truncated == null ? _null : this.Truncated.ToString();


#pragma warning restore

            ret = "{TE_Truncated_Entry: " + ret + "}";
            return ret;

        }


        public bool Equals(TE_Truncated_Entry obj2) {

#pragma warning disable 472


            if (this.Column == null) {
                if (obj2.Column != null)
                    return false;
            }
            else if (!this.Column.Equals(obj2.Column)) {
                return false;
            }

            if (this.Row == null) {
                if (obj2.Row != null)
                    return false;
            }
            else if (!this.Row.Equals(obj2.Row)) {
                return false;
            }

            if (this.Maximum_Length == null) {
                if (obj2.Maximum_Length != null)
                    return false;
            }
            else if (!this.Maximum_Length.Equals(obj2.Maximum_Length)) {
                return false;
            }

            if (this.Original == null) {
                if (obj2.Original != null)
                    return false;
            }
            else if (!this.Original.Equals(obj2.Original)) {
                return false;
            }

            if (this.Truncated == null) {
                if (obj2.Truncated != null)
                    return false;
            }
            else if (!this.Truncated.Equals(obj2.Truncated)) {
                return false;
            }

#pragma warning restore
            return true;
        }


        public override bool Equals(object obj2) {

            if (obj2 == null)
                return false;

            if (!(obj2 is TE_Truncated_Entry))
                return false;

            var ret = this.Equals((TE_Truncated_Entry)obj2);

            return ret;

        }


        public static bool operator ==(TE_Truncated_Entry left, TE_Truncated_Entry right) {

            var ret = left.Equals(right);
            return ret;

        }


        public static bool operator !=(TE_Truncated_Entry left, TE_Truncated_Entry right) {

            var ret = !left.Equals(right);
            return ret;

        }


        public override int GetHashCode() {

#pragma warning disable 472
            unchecked {
                int ret = 23;
                int temp;


                if (this.Column != null) {
                    ret *= 31;
                    temp = this.Column.GetHashCode();
                    ret += temp;

                }

                if (this.Row != null) {
                    ret *= 31;
                    temp = this.Row.GetHashCode();
                    ret += temp;

                }

                if (this.Maximum_Length != null) {
                    ret *= 31;
                    temp = this.Maximum_Length.GetHashCode();
                    ret += temp;

                }

                if (this.Original != null) {
                    ret *= 31;
                    temp = this.Original.GetHashCode();
                    ret += temp;

                }

                if (this.Truncated != null) {
                    ret *= 31;
                    temp = this.Truncated.GetHashCode();
                    ret += temp;

                }

                return ret;

            } // unchecked block
#pragma warning restore
        } // method


    }
	
}
