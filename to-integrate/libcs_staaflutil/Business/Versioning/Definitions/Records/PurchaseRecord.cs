using System;
namespace Versioning
{
    public class PurchaseRecord : Sage_Container, ILinkRecord
    {
        /* Autogenerated by sage_wrapper_generator.pl */
        SageDataObject110.PurchaseRecord pr11;
        SageDataObject120.PurchaseRecord pr12;
        SageDataObject130.PurchaseRecord pr13;
        SageDataObject140.PurchaseRecord pr14;
        SageDataObject150.PurchaseRecord pr15;
        SageDataObject160.PurchaseRecord pr16;
        SageDataObject170.PurchaseRecord pr17;


        public PurchaseRecord(object inner, int version)
            : base(version) {
            switch (m_version) {
                case 11: {
                        pr11 = (SageDataObject110.PurchaseRecord)inner;
                        m_fields = new Fields(pr11.Fields,m_version);
                        return;
                    }

                case 12: {
                        pr12 = (SageDataObject120.PurchaseRecord)inner;
                        m_fields = new Fields(pr12.Fields,m_version);
                        return;
                    }

                case 13: {
                        pr13 = (SageDataObject130.PurchaseRecord)inner;
                        m_fields = new Fields(pr13.Fields,m_version);
                        return;
                    }

                case 14: {
                        pr14 = (SageDataObject140.PurchaseRecord)inner;
                        m_fields = new Fields(pr14.Fields,m_version);
                        return;
                    }

                case 15: {
                        pr15 = (SageDataObject150.PurchaseRecord)inner;
                        m_fields = new Fields(pr15.Fields,m_version);
                        return;
                    }
                case 16: {
                        pr16 = (SageDataObject160.PurchaseRecord)inner;
                        m_fields = new Fields(pr16.Fields,m_version);
                        return;
                    }
                case 17: {
                        pr17 = (SageDataObject170.PurchaseRecord)inner;
                        m_fields = new Fields(pr17.Fields,m_version);
                        return;
                    }

                default: throw new InvalidOperationException("ver");
            }
        }

        /* Autogenerated with record_generator.pl */
        const string ACCOUNT_REF = "ACCOUNT_REF";
        const string PURCHASERECORD = "PurchaseRecord";

        
        public bool AddNew() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = pr11.AddNew();
                        break;
                    }

                case 12: {
                        ret = pr12.AddNew();
                        break;
                    }

                case 13: {
                        ret = pr13.AddNew();
                        break;
                    }

                case 14: {
                        ret = pr14.AddNew();
                        break;
                    }

                case 15: {
                        ret = pr15.AddNew();
                        break;
                    }
                case 16: {
                        ret = pr16.AddNew();
                        break;
                    }
                case 17: {
                        ret = pr17.AddNew();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Update() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = pr11.Update();
                        break;
                    }

                case 12: {
                        ret = pr12.Update();
                        break;
                    }

                case 13: {
                        ret = pr13.Update();
                        break;
                    }

                case 14: {
                        ret = pr14.Update();
                        break;
                    }

                case 15: {
                        ret = pr15.Update();
                        break;
                    }
                case 16: {
                        ret = pr16.Update();
                        break;
                    }
                case 17: {
                        ret = pr17.Update();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Edit() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = pr11.Edit();
                        break;
                    }

                case 12: {
                        ret = pr12.Edit();
                        break;
                    }

                case 13: {
                        ret = pr13.Edit();
                        break;
                    }

                case 14: {
                        ret = pr14.Edit();
                        break;
                    }

                case 15: {
                        ret = pr15.Edit();
                        break;
                    }
                case 16: {
                        ret = pr16.Edit();
                        break;
                    }
                case 17: {
                        ret = pr17.Edit();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Find(bool partial) {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = pr11.Find(partial);
                        break;
                    }

                case 12: {
                        ret = pr12.Find(partial);
                        break;
                    }

                case 13: {
                        ret = pr13.Find(partial);
                        break;
                    }

                case 14: {
                        ret = pr14.Find(partial);
                        break;
                    }

                case 15: {
                        ret = pr15.Find(partial);
                        break;
                    }
                case 16: {
                        ret = pr16.Find(partial);
                        break;
                    }
                case 17: {
                        ret = pr17.Find(partial);
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool MoveFirst() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = pr11.MoveFirst();
                        break;
                    }

                case 12: {
                        ret = pr12.MoveFirst();
                        break;
                    }

                case 13: {
                        ret = pr13.MoveFirst();
                        break;
                    }

                case 14: {
                        ret = pr14.MoveFirst();
                        break;
                    }

                case 15: {
                        ret = pr15.MoveFirst();
                        break;
                    }
                case 16: {
                        ret = pr16.MoveFirst();
                        break;
                    }
                case 17: {
                        ret = pr17.MoveFirst();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool MoveNext() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = pr11.MoveNext();
                        break;
                    }

                case 12: {
                        ret = pr12.MoveNext();
                        break;
                    }

                case 13: {
                        ret = pr13.MoveNext();
                        break;
                    }

                case 14: {
                        ret = pr14.MoveNext();
                        break;
                    }

                case 15: {
                        ret = pr15.MoveNext();
                        break;
                    }
                case 16: {
                        ret = pr16.MoveNext();
                        break;
                    }
                case 17: {
                        ret = pr17.MoveNext();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool MoveLast() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = pr11.MoveLast();
                        break;
                    }

                case 12: {
                        ret = pr12.MoveLast();
                        break;
                    }

                case 13: {
                        ret = pr13.MoveLast();
                        break;
                    }

                case 14: {
                        ret = pr14.MoveLast();
                        break;
                    }

                case 15: {
                        ret = pr15.MoveLast();
                        break;
                    }
                case 16: {
                        ret = pr16.MoveLast();
                        break;
                    }
                case 17: {
                        ret = pr17.MoveLast();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool MovePrev() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = pr11.MovePrev();
                        break;
                    }

                case 12: {
                        ret = pr12.MovePrev();
                        break;
                    }

                case 13: {
                        ret = pr13.MovePrev();
                        break;
                    }

                case 14: {
                        ret = pr14.MovePrev();
                        break;
                    }

                case 15: {
                        ret = pr15.MovePrev();
                        break;
                    }
                case 16: {
                        ret = pr16.MovePrev();
                        break;
                    }
                case 17: {
                        ret = pr17.MovePrev();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool CanRemove() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = pr11.CanRemove();
                        break;
                    }

                case 12: {
                        ret = pr12.CanRemove();
                        break;
                    }

                case 13: {
                        ret = pr13.CanRemove();
                        break;
                    }

                case 14: {
                        ret = pr14.CanRemove();
                        break;
                    }

                case 15: {
                        ret = pr15.CanRemove();
                        break;
                    }
                case 16: {
                        ret = pr16.CanRemove();
                        break;
                    }
                case 17: {
                        ret = pr17.CanRemove();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Remove() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = pr11.Remove();
                        break;
                    }

                case 12: {
                        ret = pr12.Remove();
                        break;
                    }

                case 13: {
                        ret = pr13.Remove();
                        break;
                    }

                case 14: {
                        ret = pr14.Remove();
                        break;
                    }

                case 15: {
                        ret = pr15.Remove();
                        break;
                    }
                case 16: {
                        ret = pr16.Remove();
                        break;
                    }
                case 17: {
                        ret = pr17.Remove();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public object Link {
            get {
                object ret;
                switch (m_version) {
                    case 11: {
                            ret = pr11.Link;
                            break;
                        }

                    case 12: {
                            ret = pr12.Link;
                            break;
                        }

                    case 13: {
                            ret = pr13.Link;
                            break;
                        }

                    case 14: {
                            ret = pr14.Link;
                            break;
                        }

                    case 15: {
                            ret = pr15.Link;
                            break;
                        }
                    case 16: {
                            ret = pr16.Link;
                            break;
                        }
                    case 17: {
                            ret = pr17.Link;
                            break;
                        }

                    default: throw new InvalidOperationException("ver");
                }
                return ret;
            }
            set {
                switch (m_version) {
                    case 11: {
                            pr11.Link = value;
                            break;
                        }

                    case 12: {
                            pr12.Link = value;
                            break;
                        }

                    case 13: {
                            pr13.Link = value;
                            break;
                        }

                    case 14: {
                            pr14.Link = value;
                            break;
                        }

                    case 15: {
                            pr15.Link = value;
                            break;
                        }
                    case 16: {
                            pr16.Link = value;
                            break;
                        }
                    case 17: {
                            pr17.Link = value;
                            break;
                        }

                }
            }
        }

        public int Count {
            get {
                int ret;
                switch (m_version) {
                    case 11: {
                            ret = pr11.Count;
                            break;
                        }

                    case 12: {
                            ret = pr12.Count;
                            break;
                        }

                    case 13: {
                            ret = pr13.Count;
                            break;
                        }

                    case 14: {
                            ret = pr14.Count;
                            break;
                        }

                    case 15: {
                            ret = pr15.Count;
                            break;
                        }
                    case 16: {
                            ret = pr16.Count;
                            break;
                        }
                    case 17: {
                            ret = pr17.Count;
                            break;
                        }

                    default: throw new InvalidOperationException("ver");
                }
                return ret;
            }
            set {
                switch (m_version) {
                    case 11: {
                            pr11.Count = value;
                            break;
                        }

                    case 12: {
                            pr12.Count = value;
                            break;
                        }

                    case 13: {
                            pr13.Count = value;
                            break;
                        }

                    case 14: {
                            pr14.Count = value;
                            break;
                        }

                    case 15: {
                            pr15.Count = value;
                            break;
                        }
                    case 16: {
                            pr16.Count = value;
                            break;
                        }
                    case 17: {
                            pr17.Count = value;
                            break;
                        }
                    default: throw new InvalidOperationException("ver");
                }
            }
        }
    }
}
