using System;
namespace Versioning
{
    public class InvoiceRecord : Sage_Container, ILinkRecord
    {
        /* Autogenerated by sage_wrapper_generator.pl */
        SageDataObject110.InvoiceRecord ir11;
        SageDataObject120.InvoiceRecord ir12;
        SageDataObject130.InvoiceRecord ir13;
        SageDataObject140.InvoiceRecord ir14;
        SageDataObject150.InvoiceRecord ir15;
        SageDataObject160.InvoiceRecord ir16;
        SageDataObject170.InvoiceRecord ir17;


        public InvoiceRecord(object inner, int version)
            : base(version) {
            switch (m_version) {
                case 11: {
                        ir11 = (SageDataObject110.InvoiceRecord)inner;
                        m_fields = new Fields(ir11.Fields,m_version);
                        return;
                    }

                case 12: {
                        ir12 = (SageDataObject120.InvoiceRecord)inner;
                        m_fields = new Fields(ir12.Fields,m_version);
                        return;
                    }

                case 13: {
                        ir13 = (SageDataObject130.InvoiceRecord)inner;
                        m_fields = new Fields(ir13.Fields,m_version);
                        return;
                    }

                case 14: {
                        ir14 = (SageDataObject140.InvoiceRecord)inner;
                        m_fields = new Fields(ir14.Fields,m_version);
                        return;
                    }

                case 15: {
                        ir15 = (SageDataObject150.InvoiceRecord)inner;
                        m_fields = new Fields(ir15.Fields,m_version);
                        return;
                    }
                case 16: {
                        ir16 = (SageDataObject160.InvoiceRecord)inner;
                        m_fields = new Fields(ir16.Fields,m_version);
                        return;
                    }
                case 17: {
                        ir17 = (SageDataObject170.InvoiceRecord)inner;
                        m_fields = new Fields(ir17.Fields,m_version);
                        return;
                    }

                default: throw new InvalidOperationException("ver");
            }
        }
        /* Autogenerated with record_generator.pl */
        const string ACCOUNT_REF = "ACCOUNT_REF";
        const string INVOICERECORD = "InvoiceRecord";



        public int Invoice_Number {
            get {

                return (int)this[INVOICE_NUMBER];
            }
            set {
                this[INVOICE_NUMBER] = value;
            }
        }
        public InvoiceType Invoice_Type {
            get {

                return (InvoiceType)this[STR_INVOICE_TYPE_CODE];
            }
            set {
                this[STR_INVOICE_TYPE_CODE] = value;
            }
        }

        public bool Is_Product_Credit {
            get {
                return this.Invoice_Type == Versioning.InvoiceType.sdoProductCredit;
            }
        }
        public bool Is_Product_Invoice {
            get {
                return this.Invoice_Type == Versioning.InvoiceType.sdoProductInvoice;
            }
        }



        public bool AddNew() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = ir11.AddNew();
                        break;
                    }

                case 12: {
                        ret = ir12.AddNew();
                        break;
                    }

                case 13: {
                        ret = ir13.AddNew();
                        break;
                    }

                case 14: {
                        ret = ir14.AddNew();
                        break;
                    }

                case 15: {
                        ret = ir15.AddNew();
                        break;
                    }
                case 16: {
                        ret = ir16.AddNew();
                        break;
                    }
                case 17: {
                        ret = ir17.AddNew();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Update() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = ir11.Update();
                        break;
                    }

                case 12: {
                        ret = ir12.Update();
                        break;
                    }

                case 13: {
                        ret = ir13.Update();
                        break;
                    }

                case 14: {
                        ret = ir14.Update();
                        break;
                    }

                case 15: {
                        ret = ir15.Update();
                        break;
                    }
                case 16: {
                        ret = ir16.Update();
                        break;
                    }
                case 17: {
                        ret = ir17.Update();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Edit() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = ir11.Edit();
                        break;
                    }

                case 12: {
                        ret = ir12.Edit();
                        break;
                    }

                case 13: {
                        ret = ir13.Edit();
                        break;
                    }

                case 14: {
                        ret = ir14.Edit();
                        break;
                    }

                case 15: {
                        ret = ir15.Edit();
                        break;
                    }
                case 16: {
                        ret = ir16.Edit();
                        break;
                    }
                case 17: {
                        ret = ir17.Edit();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Find(bool partial) {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = ir11.Find(partial);
                        break;
                    }

                case 12: {
                        ret = ir12.Find(partial);
                        break;
                    }

                case 13: {
                        ret = ir13.Find(partial);
                        break;
                    }

                case 14: {
                        ret = ir14.Find(partial);
                        break;
                    }

                case 15: {
                        ret = ir15.Find(partial);
                        break;
                    }
                case 16: {
                        ret = ir16.Find(partial);
                        break;
                    }
                case 17: {
                        ret = ir17.Find(partial);
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }

        public void Move(int iRecord) {
            switch (m_version) {
                case 11: {
                        ir11.Move(iRecord);
                        break;
                    }

                case 12: {
                        ir12.Move(iRecord);
                        break;
                    }

                case 13: {
                        ir13.Move(iRecord);
                        break;
                    }

                case 14: {
                        ir14.Move(iRecord);
                        break;
                    }

                case 15: {
                        ir15.Move(iRecord);
                        break;
                    }
                case 16: {
                        ir16.Move(iRecord);
                        break;
                    }
                case 17: {
                        ir17.Move(iRecord);
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
        }
        public bool MoveFirst() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = ir11.MoveFirst();
                        break;
                    }

                case 12: {
                        ret = ir12.MoveFirst();
                        break;
                    }

                case 13: {
                        ret = ir13.MoveFirst();
                        break;
                    }

                case 14: {
                        ret = ir14.MoveFirst();
                        break;
                    }

                case 15: {
                        ret = ir15.MoveFirst();
                        break;
                    }
                case 16: {
                        ret = ir16.MoveFirst();
                        break;
                    }
                case 17: {
                        ret = ir17.MoveFirst();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool MoveNext() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = ir11.MoveNext();
                        break;
                    }

                case 12: {
                        ret = ir12.MoveNext();
                        break;
                    }

                case 13: {
                        ret = ir13.MoveNext();
                        break;
                    }

                case 14: {
                        ret = ir14.MoveNext();
                        break;
                    }

                case 15: {
                        ret = ir15.MoveNext();
                        break;
                    }
                case 16: {
                        ret = ir16.MoveNext();
                        break;
                    }
                case 17: {
                        ret = ir17.MoveNext();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool MoveLast() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = ir11.MoveLast();
                        break;
                    }

                case 12: {
                        ret = ir12.MoveLast();
                        break;
                    }

                case 13: {
                        ret = ir13.MoveLast();
                        break;
                    }

                case 14: {
                        ret = ir14.MoveLast();
                        break;
                    }

                case 15: {
                        ret = ir15.MoveLast();
                        break;
                    }
                case 16: {
                        ret = ir16.MoveLast();
                        break;
                    }
                case 17: {
                        ret = ir17.MoveLast();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool MovePrev() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = ir11.MovePrev();
                        break;
                    }

                case 12: {
                        ret = ir12.MovePrev();
                        break;
                    }

                case 13: {
                        ret = ir13.MovePrev();
                        break;
                    }

                case 14: {
                        ret = ir14.MovePrev();
                        break;
                    }

                case 15: {
                        ret = ir15.MovePrev();
                        break;
                    }
                case 16: {
                        ret = ir16.MovePrev();
                        break;
                    }
                case 17: {
                        ret = ir17.MovePrev();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool CanRemove() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = ir11.CanRemove();
                        break;
                    }

                case 12: {
                        ret = ir12.CanRemove();
                        break;
                    }

                case 13: {
                        ret = ir13.CanRemove();
                        break;
                    }

                case 14: {
                        ret = ir14.CanRemove();
                        break;
                    }

                case 15: {
                        ret = ir15.CanRemove();
                        break;
                    }
                case 16: {
                        ret = ir16.CanRemove();
                        break;
                    }
                case 17: {
                        ret = ir17.CanRemove();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Remove() {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = ir11.Remove();
                        break;
                    }

                case 12: {
                        ret = ir12.Remove();
                        break;
                    }

                case 13: {
                        ret = ir13.Remove();
                        break;
                    }

                case 14: {
                        ret = ir14.Remove();
                        break;
                    }

                case 15: {
                        ret = ir15.Remove();
                        break;
                    }
                case 16: {
                        ret = ir16.Remove();
                        break;
                    }
                case 17: {
                        ret = ir17.Remove();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
            }
            return ret;
        }

        object ILink.Link {
            get {
                return Link;
            }
        }
        public InvoiceItem Link {
            get {
                object ret;
                switch (m_version) {
                    case 11: {
                            ret = ir11.Link;
                            break;
                        }

                    case 12: {
                            ret = ir12.Link;
                            break;
                        }

                    case 13: {
                            ret = ir13.Link;
                            break;
                        }

                    case 14: {
                            ret = ir14.Link;
                            break;
                        }

                    case 15: {
                            ret = ir15.Link;
                            break;
                        }
                    case 16: {
                            ret = ir16.Link;
                            break;
                        }
                    case 17: {
                            ret = ir17.Link;
                            break;
                        }

                    default: throw new InvalidOperationException("ver");
                }
                return new InvoiceItem(ret, m_version);
            }
            set {
                switch (m_version) {
                    case 11: {
                            ir11.Link = value;
                            break;
                        }

                    case 12: {
                            ir12.Link = value;
                            break;
                        }

                    case 13: {
                            ir13.Link = value;
                            break;
                        }

                    case 14: {
                            ir14.Link = value;
                            break;
                        }

                    case 15: {
                            ir15.Link = value;
                            break;
                        }
                    case 16: {
                            ir16.Link = value;
                            break;
                        }
                    case 17: {
                            ir17.Link = value;
                            break;
                        }

                }
            }
        }

        public int Count {
            get {
                int ret;
                switch (m_version) {
                    case 11: {
                            ret = ir11.Count;
                            break;
                        }

                    case 12: {
                            ret = ir12.Count;
                            break;
                        }

                    case 13: {
                            ret = ir13.Count;
                            break;
                        }

                    case 14: {
                            ret = ir14.Count;
                            break;
                        }

                    case 15: {
                            ret = ir15.Count;
                            break;
                        }
                    case 16: {
                            ret = ir16.Count;
                            break;
                        }
                    case 17: {
                            ret = ir17.Count;
                            break;
                        }

                    default: throw new InvalidOperationException("ver");
                }
                return ret;
            }
            set {
                switch (m_version) {
                    case 11: {
                            ir11.Count = value;
                            break;
                        }

                    case 12: {
                            ir12.Count = value;
                            break;
                        }

                    case 13: {
                            ir13.Count = value;
                            break;
                        }

                    case 14: {
                            ir14.Count = value;
                            break;
                        }

                    case 15: {
                            ir15.Count = value;
                            break;
                        }
                    case 16: {
                            ir16.Count = value;
                            break;
                        }
                    case 17: {
                            ir17.Count = value;
                            break;
                        }
                    default: throw new InvalidOperationException("ver");
                }
            }
        }



        public LedgerType?
        Ledger_Type {
            get {
                var invoice_type = Invoice_Type;

                var ret = invoice_type.Ledger_Type();

                return ret;
            }
        }
    }
}
