using System;
namespace Versioning
{
    public class CountryCodeRecord : Sage_Container, ISageRecord
    {
        /* Autogenerated by sage_wrapper_generator.pl */
        SageDataObject110.CountryCodeRecord ccr11;
        SageDataObject120.CountryCodeRecord ccr12;
        SageDataObject130.CountryCodeRecord ccr13;
        SageDataObject140.CountryCodeRecord ccr14;
        SageDataObject150.CountryCodeRecord ccr15;
        SageDataObject160.CountryCodeRecord ccr16;
        SageDataObject170.CountryCodeRecord ccr17;


        public CountryCodeRecord(object inner, int version)
            : base(version) {
            switch (m_version) {
            case 11: {
                    ccr11 = (SageDataObject110.CountryCodeRecord)inner;
                    m_fields = new Fields(ccr11.Fields,m_version);
                    return;
                }

            case 12: {
                    ccr12 = (SageDataObject120.CountryCodeRecord)inner;
                    m_fields = new Fields(ccr12.Fields,m_version);
                    return;
                }

            case 13: {
                    ccr13 = (SageDataObject130.CountryCodeRecord)inner;
                    m_fields = new Fields(ccr13.Fields,m_version);
                    return;
                }

            case 14: {
                    ccr14 = (SageDataObject140.CountryCodeRecord)inner;
                    m_fields = new Fields(ccr14.Fields,m_version);
                    return;
                }

            case 15: {
                    ccr15 = (SageDataObject150.CountryCodeRecord)inner;
                    m_fields = new Fields(ccr15.Fields,m_version);
                    return;
                }
            case 16: {
                    ccr16 = (SageDataObject160.CountryCodeRecord)inner;
                    m_fields = new Fields(ccr16.Fields,m_version);
                    return;
                }
            case 17: {
                    ccr17 = (SageDataObject170.CountryCodeRecord)inner;
                    m_fields = new Fields(ccr17.Fields,m_version);
                    return;
                }

            default: throw new InvalidOperationException("ver");
            }
        }
        /* Autogenerated with record_generator.pl */
        const string ACCOUNT_REF = "ACCOUNT_REF";
        const string COUNTRYCODERECORD = "CountryCodeRecord";


                public bool AddNew() {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = ccr11.AddNew();
                    break;
                }

            case 12: {
                    ret = ccr12.AddNew();
                    break;
                }

            case 13: {
                    ret = ccr13.AddNew();
                    break;
                }

            case 14: {
                    ret = ccr14.AddNew();
                    break;
                }

            case 15: {
                    ret = ccr15.AddNew();
                    break;
                }
            case 16: {
                    ret = ccr16.AddNew();
                    break;
                }
            case 17: {
                    ret = ccr17.AddNew();
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Update() {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = ccr11.Update();
                    break;
                }

            case 12: {
                    ret = ccr12.Update();
                    break;
                }

            case 13: {
                    ret = ccr13.Update();
                    break;
                }

            case 14: {
                    ret = ccr14.Update();
                    break;
                }

            case 15: {
                    ret = ccr15.Update();
                    break;
                }
            case 16: {
                    ret = ccr16.Update();
                    break;
                }
            case 17: {
                    ret = ccr17.Update();
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Edit() {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = ccr11.Edit();
                    break;
                }

            case 12: {
                    ret = ccr12.Edit();
                    break;
                }

            case 13: {
                    ret = ccr13.Edit();
                    break;
                }

            case 14: {
                    ret = ccr14.Edit();
                    break;
                }

            case 15: {
                    ret = ccr15.Edit();
                    break;
                }
            case 16: {
                    ret = ccr16.Edit();
                    break;
                }
            case 17: {
                    ret = ccr17.Edit();
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Find(bool partial) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = ccr11.Find(partial);
                    break;
                }

            case 12: {
                    ret = ccr12.Find(partial);
                    break;
                }

            case 13: {
                    ret = ccr13.Find(partial);
                    break;
                }

            case 14: {
                    ret = ccr14.Find(partial);
                    break;
                }

            case 15: {
                    ret = ccr15.Find(partial);
                    break;
                }
            case 16: {
                    ret = ccr16.Find(partial);
                    break;
                }
            case 17: {
                    ret = ccr17.Find(partial);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool MoveFirst() {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = ccr11.MoveFirst();
                    break;
                }

            case 12: {
                    ret = ccr12.MoveFirst();
                    break;
                }

            case 13: {
                    ret = ccr13.MoveFirst();
                    break;
                }

            case 14: {
                    ret = ccr14.MoveFirst();
                    break;
                }

            case 15: {
                    ret = ccr15.MoveFirst();
                    break;
                }
            case 16: {
                    ret = ccr16.MoveFirst();
                    break;
                }
            case 17: {
                    ret = ccr17.MoveFirst();
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool MoveNext() {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = ccr11.MoveNext();
                    break;
                }

            case 12: {
                    ret = ccr12.MoveNext();
                    break;
                }

            case 13: {
                    ret = ccr13.MoveNext();
                    break;
                }

            case 14: {
                    ret = ccr14.MoveNext();
                    break;
                }

            case 15: {
                    ret = ccr15.MoveNext();
                    break;
                }
            case 16: {
                    ret = ccr16.MoveNext();
                    break;
                }
            case 17: {
                    ret = ccr17.MoveNext();
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool MoveLast() {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = ccr11.MoveLast();
                    break;
                }

            case 12: {
                    ret = ccr12.MoveLast();
                    break;
                }

            case 13: {
                    ret = ccr13.MoveLast();
                    break;
                }

            case 14: {
                    ret = ccr14.MoveLast();
                    break;
                }

            case 15: {
                    ret = ccr15.MoveLast();
                    break;
                }
            case 16: {
                    ret = ccr16.MoveLast();
                    break;
                }
            case 17: {
                    ret = ccr17.MoveLast();
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool MovePrev() {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = ccr11.MovePrev();
                    break;
                }

            case 12: {
                    ret = ccr12.MovePrev();
                    break;
                }

            case 13: {
                    ret = ccr13.MovePrev();
                    break;
                }

            case 14: {
                    ret = ccr14.MovePrev();
                    break;
                }

            case 15: {
                    ret = ccr15.MovePrev();
                    break;
                }
            case 16: {
                    ret = ccr16.MovePrev();
                    break;
                }
            case 17: {
                    ret = ccr17.MovePrev();
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }

        public bool Remove() {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = ccr11.Remove();
                    break;
                }

            case 12: {
                    ret = ccr12.Remove();
                    break;
                }

            case 13: {
                    ret = ccr13.Remove();
                    break;
                }

            case 14: {
                    ret = ccr14.Remove();
                    break;
                }

            case 15: {
                    ret = ccr15.Remove();
                    break;
                }
            case 16: {
                    ret = ccr16.Remove();
                    break;
                }
            case 17: {
                    ret = ccr17.Remove();
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }

        public int Count {
            get {
                int ret;
                switch (m_version) {
                    case 11: {
                            ret = ccr11.Count;
                            break;
                        }

                    case 12: {
                            ret = ccr12.Count;
                            break;
                        }

                    case 13: {
                            ret = ccr13.Count;
                            break;
                        }

                    case 14: {
                            ret = ccr14.Count;
                            break;
                        }

                    case 15: {
                            ret = ccr15.Count;
                            break;
                        }
                    case 16: {
                            ret = ccr16.Count;
                            break;
                        }
                    case 17: {
                            ret = ccr17.Count;
                            break;
                        }

                    default: throw new InvalidOperationException("ver");
                }
                return ret;
            }
            set {
                switch (m_version) {
                    case 11: {
                            ccr11.Count = value;
                            break;
                        }

                    case 12: {
                            ccr12.Count = value;
                            break;
                        }

                    case 13: {
                            ccr13.Count = value;
                            break;
                        }

                    case 14: {
                            ccr14.Count = value;
                            break;
                        }

                    case 15: {
                            ccr15.Count = value;
                            break;
                        }
                    case 16: {
                            ccr16.Count = value;
                            break;
                        }
                    case 17: {
                            ccr17.Count = value;
                            break;
                        }
                    default: throw new InvalidOperationException("ver");
                }
            }
        }
    }
}
