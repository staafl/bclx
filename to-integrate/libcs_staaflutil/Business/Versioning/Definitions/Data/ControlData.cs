using System;
namespace Versioning
{
    public class ControlData : Sage_Container, IData
    {
        /* Autogenerated by sage_wrapper_generator.pl */
        SageDataObject110.ControlData cd11;
        SageDataObject120.ControlData cd12;
        SageDataObject130.ControlData cd13;
        SageDataObject140.ControlData cd14;
        SageDataObject150.ControlData cd15;
        SageDataObject160.ControlData cd16;
        SageDataObject170.ControlData cd17;


        public ControlData(object inner, int version)
            : base(version) {
            switch (m_version) {
            case 11: {
                    cd11 = (SageDataObject110.ControlData)inner;
                    m_fields = new Fields(cd11.Fields,m_version);
                    return;
                }

            case 12: {
                    cd12 = (SageDataObject120.ControlData)inner;
                    m_fields = new Fields(cd12.Fields,m_version);
                    return;
                }

            case 13: {
                    cd13 = (SageDataObject130.ControlData)inner;
                    m_fields = new Fields(cd13.Fields,m_version);
                    return;
                }

            case 14: {
                    cd14 = (SageDataObject140.ControlData)inner;
                    m_fields = new Fields(cd14.Fields,m_version);
                    return;
                }

            case 15: {
                    cd15 = (SageDataObject150.ControlData)inner;
                    m_fields = new Fields(cd15.Fields,m_version);
                    return;
                }
            case 16: {
                    cd16 = (SageDataObject160.ControlData)inner;
                    m_fields = new Fields(cd16.Fields,m_version);
                    return;
                }
            case 17: {
                    cd17 = (SageDataObject170.ControlData)inner;
                    m_fields = new Fields(cd17.Fields,m_version);
                    return;
                }

            default: throw new InvalidOperationException("ver");
            }
        }
        /* Autogenerated with data_generator.pl */
        const string ACCOUNT_REF = "ACCOUNT_REF";
        const string CONTROLDATA = "ControlData";


                public bool Open(OpenMode mode) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = cd11.Open((SageDataObject110.OpenMode)mode);
                    break;
                }

            case 12: {
                    ret = cd12.Open((SageDataObject120.OpenMode)mode);
                    break;
                }

            case 13: {
                    ret = cd13.Open((SageDataObject130.OpenMode)mode);
                    break;
                }

            case 14: {
                    ret = cd14.Open((SageDataObject140.OpenMode)mode);
                    break;
                }

            case 15: {
                    ret = cd15.Open((SageDataObject150.OpenMode)mode);
                    break;
                }
            case 16: {
                    ret = cd16.Open((SageDataObject160.OpenMode)mode);
                    break;
                }
            case 17: {
                    ret = cd17.Open((SageDataObject170.OpenMode)mode);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public void Close() {
            switch (m_version) {
            case 11: {
                    cd11.Close();
                    break;
                }

            case 12: {
                    cd12.Close();
                    break;
                }

            case 13: {
                    cd13.Close();
                    break;
                }

            case 14: {
                    cd14.Close();
                    break;
                }

            case 15: {
                    cd15.Close();
                    break;
                }
            case 16: {
                    cd16.Close();
                    break;
                }
            case 17: {
                    cd17.Close();
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }

        }

        public bool Read() {
            return Read(1);
        }

        public bool Read(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = cd11.Read(IRecNo);
                    break;
                }

            case 12: {
                    ret = cd12.Read(IRecNo);
                    break;
                }

            case 13: {
                    ret = cd13.Read(IRecNo);
                    break;
                }

            case 14: {
                    ret = cd14.Read(IRecNo);
                    break;
                }

            case 15: {
                    ret = cd15.Read(IRecNo);
                    break;
                }
            case 16: {
                    ret = cd16.Read(IRecNo);
                    break;
                }
            case 17: {
                    ret = cd17.Read(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Write(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = cd11.Write(IRecNo);
                    break;
                }

            case 12: {
                    ret = cd12.Write(IRecNo);
                    break;
                }

            case 13: {
                    ret = cd13.Write(IRecNo);
                    break;
                }

            case 14: {
                    ret = cd14.Write(IRecNo);
                    break;
                }

            case 15: {
                    ret = cd15.Write(IRecNo);
                    break;
                }
            case 16: {
                    ret = cd16.Write(IRecNo);
                    break;
                }
            case 17: {
                    ret = cd17.Write(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Seek(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = cd11.Seek(IRecNo);
                    break;
                }

            case 12: {
                    ret = cd12.Seek(IRecNo);
                    break;
                }

            case 13: {
                    ret = cd13.Seek(IRecNo);
                    break;
                }

            case 14: {
                    ret = cd14.Seek(IRecNo);
                    break;
                }

            case 15: {
                    ret = cd15.Seek(IRecNo);
                    break;
                }
            case 16: {
                    ret = cd16.Seek(IRecNo);
                    break;
                }
            case 17: {
                    ret = cd17.Seek(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Lock(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = cd11.Lock(IRecNo);
                    break;
                }

            case 12: {
                    ret = cd12.Lock(IRecNo);
                    break;
                }

            case 13: {
                    ret = cd13.Lock(IRecNo);
                    break;
                }

            case 14: {
                    ret = cd14.Lock(IRecNo);
                    break;
                }

            case 15: {
                    ret = cd15.Lock(IRecNo);
                    break;
                }
            case 16: {
                    ret = cd16.Lock(IRecNo);
                    break;
                }
            case 17: {
                    ret = cd17.Lock(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Unlock(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = cd11.Unlock(IRecNo);
                    break;
                }

            case 12: {
                    ret = cd12.Unlock(IRecNo);
                    break;
                }

            case 13: {
                    ret = cd13.Unlock(IRecNo);
                    break;
                }

            case 14: {
                    ret = cd14.Unlock(IRecNo);
                    break;
                }

            case 15: {
                    ret = cd15.Unlock(IRecNo);
                    break;
                }
            case 16: {
                    ret = cd16.Unlock(IRecNo);
                    break;
                }
            case 17: {
                    ret = cd17.Unlock(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        //public bool FindFirst(object varField, object varSearch) {
        //    bool ret;
        //    switch (m_version) {
        //    case 11: {
        //            ret = cd11.FindFirst(varField, varSearch);
        //            break;
        //        }

        //    case 12: {
        //            ret = cd12.FindFirst(varField, varSearch);
        //            break;
        //        }

        //    case 13: {
        //            ret = cd13.FindFirst(varField, varSearch);
        //            break;
        //        }

        //    case 14: {
        //            ret = cd14.FindFirst(varField, varSearch);
        //            break;
        //        }

        //    case 15: {
        //            ret = cd15.FindFirst(varField, varSearch);
        //            break;
        //        }
        //    case 16: {
        //            ret = cd16.FindFirst(varField, varSearch);
        //            break;
        //        }
        //    case 17: {
        //            ret = cd17.FindFirst(varField, varSearch);
        //            break;
        //        }

        //    default: throw new InvalidOperationException("ver");
        //    }
        //    return ret;
        //}
        //public bool FindNext(object varField, object varSearch) {
        //    bool ret;
        //    switch (m_version) {
        //    case 11: {
        //            ret = cd11.FindNext(varField, varSearch);
        //            break;
        //        }

        //    case 12: {
        //            ret = cd12.FindNext(varField, varSearch);
        //            break;
        //        }

        //    case 13: {
        //            ret = cd13.FindNext(varField, varSearch);
        //            break;
        //        }

        //    case 14: {
        //            ret = cd14.FindNext(varField, varSearch);
        //            break;
        //        }

        //    case 15: {
        //            ret = cd15.FindNext(varField, varSearch);
        //            break;
        //        }
        //    case 16: {
        //            ret = cd16.FindNext(varField, varSearch);
        //            break;
        //        }
        //    case 17: {
        //            ret = cd17.FindNext(varField, varSearch);
        //            break;
        //        }

        //    default: throw new InvalidOperationException("ver");
        //    }
        //    return ret;
        //}
        public int Count{
        get {
            int ret;
            switch (m_version) {
            case 11: {
                    ret = cd11.Count();
                    break;
                }

            case 12: {
                    ret = cd12.Count();
                    break;
                }

            case 13: {
                    ret = cd13.Count();
                    break;
                }

            case 14: {
                    ret = cd14.Count();
                    break;
                }

            case 15: {
                    ret = cd15.Count();
                    break;
                }
            case 16: {
                    ret = cd16.Count();
                    break;
                }
            case 17: {
                    ret = cd17.Count();
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
}
        }
    }
}
