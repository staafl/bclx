using System;
namespace Versioning
{
    public class StockCategory : Sage_Container, IData
    {
        /* Autogenerated by sage_wrapper_generator.pl */
        SageDataObject110.StockCategory sc11;
        SageDataObject120.StockCategory sc12;
        SageDataObject130.StockCategory sc13;
        SageDataObject140.StockCategory sc14;
        SageDataObject150.StockCategory sc15;
        SageDataObject160.StockCategory sc16;
        SageDataObject170.StockCategory sc17;



        public StockCategory(object inner, int version)
            : base(version) {
            switch (m_version) {
            case 11: {
                    sc11 = (SageDataObject110.StockCategory)inner;
                    m_fields = new Fields(sc11.Fields,m_version);
                    return;
                }

            case 12: {
                    sc12 = (SageDataObject120.StockCategory)inner;
                    m_fields = new Fields(sc12.Fields,m_version);
                    return;
                }

            case 13: {
                    sc13 = (SageDataObject130.StockCategory)inner;
                    m_fields = new Fields(sc13.Fields,m_version);
                    return;
                }

            case 14: {
                    sc14 = (SageDataObject140.StockCategory)inner;
                    m_fields = new Fields(sc14.Fields,m_version);
                    return;
                }

            case 15: {
                    sc15 = (SageDataObject150.StockCategory)inner;
                    m_fields = new Fields(sc15.Fields,m_version);
                    return;
                }
            case 16: {
                    sc16 = (SageDataObject160.StockCategory)inner;
                    m_fields = new Fields(sc16.Fields,m_version);
                    return;
                }
            case 17: {
                    sc17 = (SageDataObject170.StockCategory)inner;
                    m_fields = new Fields(sc17.Fields,m_version);
                    return;
                }

            default: throw new InvalidOperationException("ver");
            }
        }
        /* Autogenerated with data_generator.pl */
        const string ACCOUNT_REF = "ACCOUNT_REF";
        const string STOCKCATEGORY = "STOCKCATEGORY";


        
        public bool Open(OpenMode mode) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = sc11.Open((SageDataObject110.OpenMode)mode);
                    break;
                }

            case 12: {
                    ret = sc12.Open((SageDataObject120.OpenMode)mode);
                    break;
                }

            case 13: {
                    ret = sc13.Open((SageDataObject130.OpenMode)mode);
                    break;
                }

            case 14: {
                    ret = sc14.Open((SageDataObject140.OpenMode)mode);
                    break;
                }

            case 15: {
                    ret = sc15.Open((SageDataObject150.OpenMode)mode);
                    break;
                }
            case 16: {
                    ret = sc16.Open((SageDataObject160.OpenMode)mode);
                    break;
                }
            case 17: {
                    ret = sc17.Open((SageDataObject170.OpenMode)mode);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public void Close() {
            switch (m_version) {
            case 11: {
                    sc11.Close();
                    break;
                }

            case 12: {
                    sc12.Close();
                    break;
                }

            case 13: {
                    sc13.Close();
                    break;
                }

            case 14: {
                    sc14.Close();
                    break;
                }

            case 15: {
                    sc15.Close();
                    break;
                }
            case 16: {
                    sc16.Close();
                    break;
                }
            case 17: {
                    sc17.Close();
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }

        }
        public bool Read(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = sc11.Read(IRecNo);
                    break;
                }

            case 12: {
                    ret = sc12.Read(IRecNo);
                    break;
                }

            case 13: {
                    ret = sc13.Read(IRecNo);
                    break;
                }

            case 14: {
                    ret = sc14.Read(IRecNo);
                    break;
                }

            case 15: {
                    ret = sc15.Read(IRecNo);
                    break;
                }
            case 16: {
                    ret = sc16.Read(IRecNo);
                    break;
                }
            case 17: {
                    ret = sc17.Read(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Write(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = sc11.Write(IRecNo);
                    break;
                }

            case 12: {
                    ret = sc12.Write(IRecNo);
                    break;
                }

            case 13: {
                    ret = sc13.Write(IRecNo);
                    break;
                }

            case 14: {
                    ret = sc14.Write(IRecNo);
                    break;
                }

            case 15: {
                    ret = sc15.Write(IRecNo);
                    break;
                }
            case 16: {
                    ret = sc16.Write(IRecNo);
                    break;
                }
            case 17: {
                    ret = sc17.Write(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Seek(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = sc11.Seek(IRecNo);
                    break;
                }

            case 12: {
                    ret = sc12.Seek(IRecNo);
                    break;
                }

            case 13: {
                    ret = sc13.Seek(IRecNo);
                    break;
                }

            case 14: {
                    ret = sc14.Seek(IRecNo);
                    break;
                }

            case 15: {
                    ret = sc15.Seek(IRecNo);
                    break;
                }
            case 16: {
                    ret = sc16.Seek(IRecNo);
                    break;
                }
            case 17: {
                    ret = sc17.Seek(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Lock(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = sc11.Lock(IRecNo);
                    break;
                }

            case 12: {
                    ret = sc12.Lock(IRecNo);
                    break;
                }

            case 13: {
                    ret = sc13.Lock(IRecNo);
                    break;
                }

            case 14: {
                    ret = sc14.Lock(IRecNo);
                    break;
                }

            case 15: {
                    ret = sc15.Lock(IRecNo);
                    break;
                }
            case 16: {
                    ret = sc16.Lock(IRecNo);
                    break;
                }
            case 17: {
                    ret = sc17.Lock(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Unlock(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = sc11.Unlock(IRecNo);
                    break;
                }

            case 12: {
                    ret = sc12.Unlock(IRecNo);
                    break;
                }

            case 13: {
                    ret = sc13.Unlock(IRecNo);
                    break;
                }

            case 14: {
                    ret = sc14.Unlock(IRecNo);
                    break;
                }

            case 15: {
                    ret = sc15.Unlock(IRecNo);
                    break;
                }
            case 16: {
                    ret = sc16.Unlock(IRecNo);
                    break;
                }
            case 17: {
                    ret = sc17.Unlock(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool FindFirst(object varField, object varSearch) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = sc11.FindFirst(varField, varSearch);
                    break;
                }

            case 12: {
                    ret = sc12.FindFirst(varField, varSearch);
                    break;
                }

            case 13: {
                    ret = sc13.FindFirst(varField, varSearch);
                    break;
                }

            case 14: {
                    ret = sc14.FindFirst(varField, varSearch);
                    break;
                }

            case 15: {
                    ret = sc15.FindFirst(varField, varSearch);
                    break;
                }
            case 16: {
                    ret = sc16.FindFirst(varField, varSearch);
                    break;
                }
            case 17: {
                    ret = sc17.FindFirst(varField, varSearch);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool FindNext(object varField, object varSearch) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = sc11.FindNext(varField, varSearch);
                    break;
                }

            case 12: {
                    ret = sc12.FindNext(varField, varSearch);
                    break;
                }

            case 13: {
                    ret = sc13.FindNext(varField, varSearch);
                    break;
                }

            case 14: {
                    ret = sc14.FindNext(varField, varSearch);
                    break;
                }

            case 15: {
                    ret = sc15.FindNext(varField, varSearch);
                    break;
                }
            case 16: {
                    ret = sc16.FindNext(varField, varSearch);
                    break;
                }
            case 17: {
                    ret = sc17.FindNext(varField, varSearch);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public int Count {
            get {
                int ret;
                switch (m_version) {
                case 11: {
                        ret = sc11.Count();
                        break;
                    }

                case 12: {
                        ret = sc12.Count();
                        break;
                    }

                case 13: {
                        ret = sc13.Count();
                        break;
                    }

                case 14: {
                        ret = sc14.Count();
                        break;
                    }

                case 15: {
                        ret = sc15.Count();
                        break;
                    }
                case 16: {
                        ret = sc16.Count();
                        break;
                    }
                case 17: {
                        ret = sc17.Count();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
                }
                return ret;
            }
        }
    }
}
