using System;
namespace Versioning
{
    public class HeaderData : Sage_Container, IData, IMove, IFindFirstNext
    {
        /* Autogenerated by sage_wrapper_generator.pl */
        SageDataObject110.HeaderData hd11;
        SageDataObject120.HeaderData hd12;
        SageDataObject130.HeaderData hd13;
        SageDataObject140.HeaderData hd14;
        SageDataObject150.HeaderData hd15;
        SageDataObject160.HeaderData hd16;
        SageDataObject170.HeaderData hd17;


        public HeaderData(object inner, int version)
            : base(version) {
            switch (m_version) {
                case 11: {
                        hd11 = (SageDataObject110.HeaderData)inner;
                        m_fields = new Fields(hd11.Fields, m_version);
                        return;
                    }

                case 12: {
                        hd12 = (SageDataObject120.HeaderData)inner;
                        m_fields = new Fields(hd12.Fields, m_version);
                        return;
                    }

                case 13: {
                        hd13 = (SageDataObject130.HeaderData)inner;
                        m_fields = new Fields(hd13.Fields, m_version);
                        return;
                    }

                case 14: {
                        hd14 = (SageDataObject140.HeaderData)inner;
                        m_fields = new Fields(hd14.Fields, m_version);
                        return;
                    }

                case 15: {
                        hd15 = (SageDataObject150.HeaderData)inner;
                        m_fields = new Fields(hd15.Fields, m_version);
                        return;
                    }
                case 16: {
                        hd16 = (SageDataObject160.HeaderData)inner;
                        m_fields = new Fields(hd16.Fields, m_version);
                        return;
                    }
                case 17: {
                        hd17 = (SageDataObject170.HeaderData)inner;
                        m_fields = new Fields(hd17.Fields, m_version);
                        return;
                    }

                default: throw new InvalidOperationException("m_version");
            }
        }
        /* Autogenerated with data_generator.pl */
        const string ACCOUNT_REF = "ACCOUNT_REF";
        const string HEADERDATA = "HeaderData";



        public bool Open(OpenMode mode) {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = hd11.Open((SageDataObject110.OpenMode)mode);
                        break;
                    }

                case 12: {
                        ret = hd12.Open((SageDataObject120.OpenMode)mode);
                        break;
                    }

                case 13: {
                        ret = hd13.Open((SageDataObject130.OpenMode)mode);
                        break;
                    }

                case 14: {
                        ret = hd14.Open((SageDataObject140.OpenMode)mode);
                        break;
                    }

                case 15: {
                        ret = hd15.Open((SageDataObject150.OpenMode)mode);
                        break;
                    }
                case 16: {
                        ret = hd16.Open((SageDataObject160.OpenMode)mode);
                        break;
                    }
                case 17: {
                        ret = hd17.Open((SageDataObject170.OpenMode)mode);
                        break;
                    }

                default: throw new InvalidOperationException("m_version");
            }
            return ret;
        }
        public void Close() {
            switch (m_version) {
                case 11: {
                        hd11.Close();
                        break;
                    }

                case 12: {
                        hd12.Close();
                        break;
                    }

                case 13: {
                        hd13.Close();
                        break;
                    }

                case 14: {
                        hd14.Close();
                        break;
                    }

                case 15: {
                        hd15.Close();
                        break;
                    }
                case 16: {
                        hd16.Close();
                        break;
                    }
                case 17: {
                        hd17.Close();
                        break;
                    }

                default: throw new InvalidOperationException("m_version");
            }

        }
        public bool Read(int IRecNo) {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = hd11.Read(IRecNo);
                        break;
                    }

                case 12: {
                        ret = hd12.Read(IRecNo);
                        break;
                    }

                case 13: {
                        ret = hd13.Read(IRecNo);
                        break;
                    }

                case 14: {
                        ret = hd14.Read(IRecNo);
                        break;
                    }

                case 15: {
                        ret = hd15.Read(IRecNo);
                        break;
                    }
                case 16: {
                        ret = hd16.Read(IRecNo);
                        break;
                    }
                case 17: {
                        ret = hd17.Read(IRecNo);
                        break;
                    }

                default: throw new InvalidOperationException("m_version");
            }
            return ret;
        }
        public bool Write(int IRecNo) {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = hd11.Write(IRecNo);
                        break;
                    }

                case 12: {
                        ret = hd12.Write(IRecNo);
                        break;
                    }

                case 13: {
                        ret = hd13.Write(IRecNo);
                        break;
                    }

                case 14: {
                        ret = hd14.Write(IRecNo);
                        break;
                    }

                case 15: {
                        ret = hd15.Write(IRecNo);
                        break;
                    }
                case 16: {
                        ret = hd16.Write(IRecNo);
                        break;
                    }
                case 17: {
                        ret = hd17.Write(IRecNo);
                        break;
                    }

                default: throw new InvalidOperationException("m_version");
            }
            return ret;
        }
        public bool Seek(int IRecNo) {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = hd11.Seek(IRecNo);
                        break;
                    }

                case 12: {
                        ret = hd12.Seek(IRecNo);
                        break;
                    }

                case 13: {
                        ret = hd13.Seek(IRecNo);
                        break;
                    }

                case 14: {
                        ret = hd14.Seek(IRecNo);
                        break;
                    }

                case 15: {
                        ret = hd15.Seek(IRecNo);
                        break;
                    }
                case 16: {
                        ret = hd16.Seek(IRecNo);
                        break;
                    }
                case 17: {
                        ret = hd17.Seek(IRecNo);
                        break;
                    }

                default: throw new InvalidOperationException("m_version");
            }
            return ret;
        }
        public bool Lock(int IRecNo) {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = hd11.Lock(IRecNo);
                        break;
                    }

                case 12: {
                        ret = hd12.Lock(IRecNo);
                        break;
                    }

                case 13: {
                        ret = hd13.Lock(IRecNo);
                        break;
                    }

                case 14: {
                        ret = hd14.Lock(IRecNo);
                        break;
                    }

                case 15: {
                        ret = hd15.Lock(IRecNo);
                        break;
                    }
                case 16: {
                        ret = hd16.Lock(IRecNo);
                        break;
                    }
                case 17: {
                        ret = hd17.Lock(IRecNo);
                        break;
                    }

                default: throw new InvalidOperationException("m_version");
            }
            return ret;
        }
        public bool Unlock(int IRecNo) {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = hd11.Unlock(IRecNo);
                        break;
                    }

                case 12: {
                        ret = hd12.Unlock(IRecNo);
                        break;
                    }

                case 13: {
                        ret = hd13.Unlock(IRecNo);
                        break;
                    }

                case 14: {
                        ret = hd14.Unlock(IRecNo);
                        break;
                    }

                case 15: {
                        ret = hd15.Unlock(IRecNo);
                        break;
                    }
                case 16: {
                        ret = hd16.Unlock(IRecNo);
                        break;
                    }
                case 17: {
                        ret = hd17.Unlock(IRecNo);
                        break;
                    }

                default: throw new InvalidOperationException("m_version");
            }
            return ret;
        }
        public bool FindFirst(object varField, object varSearch) {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = hd11.FindFirst(varField, varSearch);
                        break;
                    }

                case 12: {
                        ret = hd12.FindFirst(varField, varSearch);
                        break;
                    }

                case 13: {
                        ret = hd13.FindFirst(varField, varSearch);
                        break;
                    }

                case 14: {
                        ret = hd14.FindFirst(varField, varSearch);
                        break;
                    }

                case 15: {
                        ret = hd15.FindFirst(varField, varSearch);
                        break;
                    }
                case 16: {
                        ret = hd16.FindFirst(varField, varSearch);
                        break;
                    }
                case 17: {
                        ret = hd17.FindFirst(varField, varSearch);
                        break;
                    }

                default: throw new InvalidOperationException("m_version");
            }
            return ret;
        }
        public bool FindNext(object varField, object varSearch) {
            bool ret;
            switch (m_version) {
                case 11: {
                        ret = hd11.FindNext(varField, varSearch);
                        break;
                    }

                case 12: {
                        ret = hd12.FindNext(varField, varSearch);
                        break;
                    }

                case 13: {
                        ret = hd13.FindNext(varField, varSearch);
                        break;
                    }

                case 14: {
                        ret = hd14.FindNext(varField, varSearch);
                        break;
                    }

                case 15: {
                        ret = hd15.FindNext(varField, varSearch);
                        break;
                    }
                case 16: {
                        ret = hd16.FindNext(varField, varSearch);
                        break;
                    }
                case 17: {
                        ret = hd17.FindNext(varField, varSearch);
                        break;
                    }

                default: throw new InvalidOperationException("m_version");
            }
            return ret;
        }
        public int Count {
            get {
                int ret;
                switch (m_version) {
                    case 11: {
                            ret = hd11.Count;
                            break;
                        }

                    case 12: {
                            ret = hd12.Count;
                            break;
                        }

                    case 13: {
                            ret = hd13.Count;
                            break;
                        }

                    case 14: {
                            ret = hd14.Count;
                            break;
                        }

                    case 15: {
                            ret = hd15.Count;
                            break;
                        }
                    case 16: {
                            ret = hd16.Count;
                            break;
                        }
                    case 17: {
                            ret = hd17.Count;
                            break;
                        }

                    default: throw new InvalidOperationException("m_version");
                }
                return ret;
            }
        }
        public bool MoveFirst() {
            switch (m_version) {
                case 11:
                    return hd11.MoveFirst();
                case 12:
                    return hd12.MoveFirst();
                case 13:
                    return hd13.MoveFirst();
                case 14:
                    return hd14.MoveFirst();
                case 15:
                    return hd15.MoveFirst();
                case 16:
                    return hd16.MoveFirst();
                case 17:
                    return hd17.MoveFirst();
            }
            throw new InvalidOperationException();

        }
        public bool MoveNext() {
            switch (m_version) {
                case 11:
                    return hd11.MoveNext();
                case 12:
                    return hd12.MoveNext();
                case 13:
                    return hd13.MoveNext();
                case 14:
                    return hd14.MoveNext();
                case 15:
                    return hd15.MoveNext();
                case 16:
                    return hd16.MoveNext();
                case 17:
                    return hd17.MoveNext();
            }
            throw new InvalidOperationException();

        }
        public bool MoveLast() {
            switch (m_version) {
                case 11:
                    return hd11.MoveLast();
                case 12:
                    return hd12.MoveLast();
                case 13:
                    return hd13.MoveLast();
                case 14:
                    return hd14.MoveLast();
                case 15:
                    return hd15.MoveLast();
                case 16:
                    return hd16.MoveLast();
                case 17:
                    return hd17.MoveLast();
            }
            throw new InvalidOperationException();

        }
        public bool MovePrev() {
            switch (m_version) {
                case 11:
                    return hd11.MovePrev();
                case 12:
                    return hd12.MovePrev();
                case 13:
                    return hd13.MovePrev();
                case 14:
                    return hd14.MovePrev();
                case 15:
                    return hd15.MovePrev();
                case 16:
                    return hd16.MovePrev();
                case 17:
                    return hd17.MovePrev();
            }
            throw new InvalidOperationException();

        }

        public SplitData Link {
            get {
                object obj;
                switch (m_version) {
                    case 11:
                        obj = hd11.Link; break;
                    case 12:
                        obj = hd12.Link; break;
                    case 13:
                        obj = hd13.Link; break;
                    case 14:
                        obj = hd14.Link; break;
                    case 15:
                        obj = hd15.Link; break;
                    case 16:
                        obj = hd16.Link; break;
                    case 17:
                        obj = hd17.Link; break;
                    default:
                        throw new InvalidOperationException();
                }
                return new SplitData(obj, m_version);
            }
        }
    }
}
