using System;
namespace Versioning
{
    public class UsageData : Sage_Container, IData
    {
        /* Autogenerated by sage_wrapper_generator.pl */
        SageDataObject110.UsageData ud11;
        SageDataObject120.UsageData ud12;
        SageDataObject130.UsageData ud13;
        SageDataObject140.UsageData ud14;
        SageDataObject150.UsageData ud15;
        SageDataObject160.UsageData ud16;
        SageDataObject170.UsageData ud17;


        public UsageData(object inner, int version)
            : base(version) {
            switch (m_version) {
            case 11: {
                    ud11 = (SageDataObject110.UsageData)inner;
                    m_fields = new Fields(ud11.Fields,m_version);
                    return;
                }

            case 12: {
                    ud12 = (SageDataObject120.UsageData)inner;
                    m_fields = new Fields(ud12.Fields,m_version);
                    return;
                }

            case 13: {
                    ud13 = (SageDataObject130.UsageData)inner;
                    m_fields = new Fields(ud13.Fields,m_version);
                    return;
                }

            case 14: {
                    ud14 = (SageDataObject140.UsageData)inner;
                    m_fields = new Fields(ud14.Fields,m_version);
                    return;
                }

            case 15: {
                    ud15 = (SageDataObject150.UsageData)inner;
                    m_fields = new Fields(ud15.Fields,m_version);
                    return;
                }
            case 16: {
                    ud16 = (SageDataObject160.UsageData)inner;
                    m_fields = new Fields(ud16.Fields,m_version);
                    return;
                }
            case 17: {
                    ud17 = (SageDataObject170.UsageData)inner;
                    m_fields = new Fields(ud17.Fields,m_version);
                    return;
                }

            default: throw new InvalidOperationException("ver");
            }
        }
        /* Autogenerated with data_generator.pl */
        const string ACCOUNT_REF = "ACCOUNT_REF";
        const string USAGEDATA = "UsageData";


                public bool Open(OpenMode mode) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = ud11.Open((SageDataObject110.OpenMode)mode);
                    break;
                }

            case 12: {
                    ret = ud12.Open((SageDataObject120.OpenMode)mode);
                    break;
                }

            case 13: {
                    ret = ud13.Open((SageDataObject130.OpenMode)mode);
                    break;
                }

            case 14: {
                    ret = ud14.Open((SageDataObject140.OpenMode)mode);
                    break;
                }

            case 15: {
                    ret = ud15.Open((SageDataObject150.OpenMode)mode);
                    break;
                }
            case 16: {
                    ret = ud16.Open((SageDataObject160.OpenMode)mode);
                    break;
                }
            case 17: {
                    ret = ud17.Open((SageDataObject170.OpenMode)mode);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public void Close() {
            switch (m_version) {
            case 11: {
                    ud11.Close();
                    break;
                }

            case 12: {
                    ud12.Close();
                    break;
                }

            case 13: {
                    ud13.Close();
                    break;
                }

            case 14: {
                    ud14.Close();
                    break;
                }

            case 15: {
                    ud15.Close();
                    break;
                }
            case 16: {
                    ud16.Close();
                    break;
                }
            case 17: {
                    ud17.Close();
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }

        }
        public bool Read(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = ud11.Read(IRecNo);
                    break;
                }

            case 12: {
                    ret = ud12.Read(IRecNo);
                    break;
                }

            case 13: {
                    ret = ud13.Read(IRecNo);
                    break;
                }

            case 14: {
                    ret = ud14.Read(IRecNo);
                    break;
                }

            case 15: {
                    ret = ud15.Read(IRecNo);
                    break;
                }
            case 16: {
                    ret = ud16.Read(IRecNo);
                    break;
                }
            case 17: {
                    ret = ud17.Read(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Write(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = ud11.Write(IRecNo);
                    break;
                }

            case 12: {
                    ret = ud12.Write(IRecNo);
                    break;
                }

            case 13: {
                    ret = ud13.Write(IRecNo);
                    break;
                }

            case 14: {
                    ret = ud14.Write(IRecNo);
                    break;
                }

            case 15: {
                    ret = ud15.Write(IRecNo);
                    break;
                }
            case 16: {
                    ret = ud16.Write(IRecNo);
                    break;
                }
            case 17: {
                    ret = ud17.Write(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Seek(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = ud11.Seek(IRecNo);
                    break;
                }

            case 12: {
                    ret = ud12.Seek(IRecNo);
                    break;
                }

            case 13: {
                    ret = ud13.Seek(IRecNo);
                    break;
                }

            case 14: {
                    ret = ud14.Seek(IRecNo);
                    break;
                }

            case 15: {
                    ret = ud15.Seek(IRecNo);
                    break;
                }
            case 16: {
                    ret = ud16.Seek(IRecNo);
                    break;
                }
            case 17: {
                    ret = ud17.Seek(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Lock(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = ud11.Lock(IRecNo);
                    break;
                }

            case 12: {
                    ret = ud12.Lock(IRecNo);
                    break;
                }

            case 13: {
                    ret = ud13.Lock(IRecNo);
                    break;
                }

            case 14: {
                    ret = ud14.Lock(IRecNo);
                    break;
                }

            case 15: {
                    ret = ud15.Lock(IRecNo);
                    break;
                }
            case 16: {
                    ret = ud16.Lock(IRecNo);
                    break;
                }
            case 17: {
                    ret = ud17.Lock(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Unlock(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = ud11.Unlock(IRecNo);
                    break;
                }

            case 12: {
                    ret = ud12.Unlock(IRecNo);
                    break;
                }

            case 13: {
                    ret = ud13.Unlock(IRecNo);
                    break;
                }

            case 14: {
                    ret = ud14.Unlock(IRecNo);
                    break;
                }

            case 15: {
                    ret = ud15.Unlock(IRecNo);
                    break;
                }
            case 16: {
                    ret = ud16.Unlock(IRecNo);
                    break;
                }
            case 17: {
                    ret = ud17.Unlock(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool FindFirst(object varField, object varSearch) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = ud11.FindFirst(varField, varSearch);
                    break;
                }

            case 12: {
                    ret = ud12.FindFirst(varField, varSearch);
                    break;
                }

            case 13: {
                    ret = ud13.FindFirst(varField, varSearch);
                    break;
                }

            case 14: {
                    ret = ud14.FindFirst(varField, varSearch);
                    break;
                }

            case 15: {
                    ret = ud15.FindFirst(varField, varSearch);
                    break;
                }
            case 16: {
                    ret = ud16.FindFirst(varField, varSearch);
                    break;
                }
            case 17: {
                    ret = ud17.FindFirst(varField, varSearch);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool FindNext(object varField, object varSearch) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = ud11.FindNext(varField, varSearch);
                    break;
                }

            case 12: {
                    ret = ud12.FindNext(varField, varSearch);
                    break;
                }

            case 13: {
                    ret = ud13.FindNext(varField, varSearch);
                    break;
                }

            case 14: {
                    ret = ud14.FindNext(varField, varSearch);
                    break;
                }

            case 15: {
                    ret = ud15.FindNext(varField, varSearch);
                    break;
                }
            case 16: {
                    ret = ud16.FindNext(varField, varSearch);
                    break;
                }
            case 17: {
                    ret = ud17.FindNext(varField, varSearch);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public int Count {
            get {
                int ret;
                switch (m_version) {
                case 11: {
                        ret = ud11.Count;
                        break;
                    }

                case 12: {
                        ret = ud12.Count;
                        break;
                    }

                case 13: {
                        ret = ud13.Count;
                        break;
                    }

                case 14: {
                        ret = ud14.Count;
                        break;
                    }

                case 15: {
                        ret = ud15.Count;
                        break;
                    }
                case 16: {
                        ret = ud16.Count;
                        break;
                    }
                case 17: {
                        ret = ud17.Count;
                        break;
                    }

                default: throw new InvalidOperationException("ver");
                }
                return ret;
            }
        }
    }
}
