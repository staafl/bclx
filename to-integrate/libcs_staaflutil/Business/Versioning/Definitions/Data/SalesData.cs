using System;
namespace Versioning
{
    public class SalesData : Sage_Container, IData
    {
        /* Autogenerated by sage_wrapper_generator.pl */
        SageDataObject110.SalesData sd11;
        SageDataObject120.SalesData sd12;
        SageDataObject130.SalesData sd13;
        SageDataObject140.SalesData sd14;
        SageDataObject150.SalesData sd15;
        SageDataObject160.SalesData sd16;
        SageDataObject170.SalesData sd17;


        public SalesData(object inner, int version)
            : base(version) {
            switch (m_version) {
            case 11: {
                    sd11 = (SageDataObject110.SalesData)inner;
                    m_fields = new Fields(sd11.Fields,m_version);
                    return;
                }

            case 12: {
                    sd12 = (SageDataObject120.SalesData)inner;
                    m_fields = new Fields(sd12.Fields,m_version);
                    return;
                }

            case 13: {
                    sd13 = (SageDataObject130.SalesData)inner;
                    m_fields = new Fields(sd13.Fields,m_version);
                    return;
                }

            case 14: {
                    sd14 = (SageDataObject140.SalesData)inner;
                    m_fields = new Fields(sd14.Fields,m_version);
                    return;
                }

            case 15: {
                    sd15 = (SageDataObject150.SalesData)inner;
                    m_fields = new Fields(sd15.Fields,m_version);
                    return;
                }
            case 16: {
                    sd16 = (SageDataObject160.SalesData)inner;
                    m_fields = new Fields(sd16.Fields,m_version);
                    return;
                }
            case 17: {
                    sd17 = (SageDataObject170.SalesData)inner;
                    m_fields = new Fields(sd17.Fields,m_version);
                    return;
                }

            default: throw new InvalidOperationException("ver");
            }
        }
        /* Autogenerated with data_generator.pl */
        const string ACCOUNT_REF = "ACCOUNT_REF";
        const string SALESDATA = "SalesData";


                public bool Open(OpenMode mode) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = sd11.Open((SageDataObject110.OpenMode)mode);
                    break;
                }

            case 12: {
                    ret = sd12.Open((SageDataObject120.OpenMode)mode);
                    break;
                }

            case 13: {
                    ret = sd13.Open((SageDataObject130.OpenMode)mode);
                    break;
                }

            case 14: {
                    ret = sd14.Open((SageDataObject140.OpenMode)mode);
                    break;
                }

            case 15: {
                    ret = sd15.Open((SageDataObject150.OpenMode)mode);
                    break;
                }
            case 16: {
                    ret = sd16.Open((SageDataObject160.OpenMode)mode);
                    break;
                }
            case 17: {
                    ret = sd17.Open((SageDataObject170.OpenMode)mode);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public void Close() {
            switch (m_version) {
            case 11: {
                    sd11.Close();
                    break;
                }

            case 12: {
                    sd12.Close();
                    break;
                }

            case 13: {
                    sd13.Close();
                    break;
                }

            case 14: {
                    sd14.Close();
                    break;
                }

            case 15: {
                    sd15.Close();
                    break;
                }
            case 16: {
                    sd16.Close();
                    break;
                }
            case 17: {
                    sd17.Close();
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }

        }
        public bool Read(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = sd11.Read(IRecNo);
                    break;
                }

            case 12: {
                    ret = sd12.Read(IRecNo);
                    break;
                }

            case 13: {
                    ret = sd13.Read(IRecNo);
                    break;
                }

            case 14: {
                    ret = sd14.Read(IRecNo);
                    break;
                }

            case 15: {
                    ret = sd15.Read(IRecNo);
                    break;
                }
            case 16: {
                    ret = sd16.Read(IRecNo);
                    break;
                }
            case 17: {
                    ret = sd17.Read(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Write(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = sd11.Write(IRecNo);
                    break;
                }

            case 12: {
                    ret = sd12.Write(IRecNo);
                    break;
                }

            case 13: {
                    ret = sd13.Write(IRecNo);
                    break;
                }

            case 14: {
                    ret = sd14.Write(IRecNo);
                    break;
                }

            case 15: {
                    ret = sd15.Write(IRecNo);
                    break;
                }
            case 16: {
                    ret = sd16.Write(IRecNo);
                    break;
                }
            case 17: {
                    ret = sd17.Write(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Seek(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = sd11.Seek(IRecNo);
                    break;
                }

            case 12: {
                    ret = sd12.Seek(IRecNo);
                    break;
                }

            case 13: {
                    ret = sd13.Seek(IRecNo);
                    break;
                }

            case 14: {
                    ret = sd14.Seek(IRecNo);
                    break;
                }

            case 15: {
                    ret = sd15.Seek(IRecNo);
                    break;
                }
            case 16: {
                    ret = sd16.Seek(IRecNo);
                    break;
                }
            case 17: {
                    ret = sd17.Seek(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Lock(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = sd11.Lock(IRecNo);
                    break;
                }

            case 12: {
                    ret = sd12.Lock(IRecNo);
                    break;
                }

            case 13: {
                    ret = sd13.Lock(IRecNo);
                    break;
                }

            case 14: {
                    ret = sd14.Lock(IRecNo);
                    break;
                }

            case 15: {
                    ret = sd15.Lock(IRecNo);
                    break;
                }
            case 16: {
                    ret = sd16.Lock(IRecNo);
                    break;
                }
            case 17: {
                    ret = sd17.Lock(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool Unlock(int IRecNo) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = sd11.Unlock(IRecNo);
                    break;
                }

            case 12: {
                    ret = sd12.Unlock(IRecNo);
                    break;
                }

            case 13: {
                    ret = sd13.Unlock(IRecNo);
                    break;
                }

            case 14: {
                    ret = sd14.Unlock(IRecNo);
                    break;
                }

            case 15: {
                    ret = sd15.Unlock(IRecNo);
                    break;
                }
            case 16: {
                    ret = sd16.Unlock(IRecNo);
                    break;
                }
            case 17: {
                    ret = sd17.Unlock(IRecNo);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool FindFirst(object varField, object varSearch) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = sd11.FindFirst(varField, varSearch);
                    break;
                }

            case 12: {
                    ret = sd12.FindFirst(varField, varSearch);
                    break;
                }

            case 13: {
                    ret = sd13.FindFirst(varField, varSearch);
                    break;
                }

            case 14: {
                    ret = sd14.FindFirst(varField, varSearch);
                    break;
                }

            case 15: {
                    ret = sd15.FindFirst(varField, varSearch);
                    break;
                }
            case 16: {
                    ret = sd16.FindFirst(varField, varSearch);
                    break;
                }
            case 17: {
                    ret = sd17.FindFirst(varField, varSearch);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public bool FindNext(object varField, object varSearch) {
            bool ret;
            switch (m_version) {
            case 11: {
                    ret = sd11.FindNext(varField, varSearch);
                    break;
                }

            case 12: {
                    ret = sd12.FindNext(varField, varSearch);
                    break;
                }

            case 13: {
                    ret = sd13.FindNext(varField, varSearch);
                    break;
                }

            case 14: {
                    ret = sd14.FindNext(varField, varSearch);
                    break;
                }

            case 15: {
                    ret = sd15.FindNext(varField, varSearch);
                    break;
                }
            case 16: {
                    ret = sd16.FindNext(varField, varSearch);
                    break;
                }
            case 17: {
                    ret = sd17.FindNext(varField, varSearch);
                    break;
                }

            default: throw new InvalidOperationException("ver");
            }
            return ret;
        }
        public int Count {
            get {
                int ret;
                switch (m_version) {
                case 11: {
                        ret = sd11.Count();
                        break;
                    }

                case 12: {
                        ret = sd12.Count();
                        break;
                    }

                case 13: {
                        ret = sd13.Count();
                        break;
                    }

                case 14: {
                        ret = sd14.Count();
                        break;
                    }

                case 15: {
                        ret = sd15.Count();
                        break;
                    }
                case 16: {
                        ret = sd16.Count();
                        break;
                    }
                case 17: {
                        ret = sd17.Count();
                        break;
                    }

                default: throw new InvalidOperationException("ver");
                }
                return ret;
            }
        }


    }
}
